' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // 
' // 
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports Npgsql
Imports NpgsqlTypes

Imports SD.LLBLGen.Pro.ORMSupportClasses

Imports <[RootNamespace]>.HelperClasses

Namespace <[RootNamespace]>.StoredProcedureCallerClasses
	''' <summary>
	''' Class which contains the static logic to execute action stored procedures in the database.
	''' </summary>
	Public Class ActionProcedures
		''' <summary>
		''' Private CTor so no instance can be created.
		''' </summary>
		Private Sub New()
		End Sub

	<[Foreach ActionStoredProcedureCall CrLf]>
		''' <summary>
		''' Delegate definition for stored procedure '<[ActualStoredProcedureName]>' to be used in combination of a UnitOfWork object.
		''' </summary>
		Delegate Function <[CurrentSPCallName]>CallBack(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>transactionToUse As ITransaction) As Integer

		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty ActionStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]>) As Integer
			Dim parameters() As NpgsqlParameter = New NpgsqlParameter(<[AmountOfParameters]> - 1) {}
<[Foreach Parameter CrLf]>			parameters(<[ParameterIndex]>) = New NpgsqlParameter("<[ActualParameterName]>", NpgsqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, "", ParameterDirection.<[CurrentParameterDirection]>, True, <[ParameterPrecision]>, <[ParameterScale]>,  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("<[SourceSchemaName]>.<[ActualStoredProcedureName]>(<[Foreach Parameter Comma]>:<[ActualParameterName]><[NextForeach]>)", parameters, Nothing)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty ActionStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter NoCursors]>, <[EndIf]>transactionToUse As ITransaction) As Integer
			Dim parameters() As NpgsqlParameter = New NpgsqlParameter(<[AmountOfParameters]> - 1) {}
<[Foreach Parameter CrLf]>			parameters(<[ParameterIndex]>) = New NpgsqlParameter("<[ActualParameterName]>", NpgsqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, "", ParameterDirection.<[CurrentParameterDirection]>, True, <[ParameterPrecision]>, <[ParameterScale]>,  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			Dim toReturn As Integer = DbUtils.CallActionStoredProcedure("<[SourceSchemaName]>.<[ActualStoredProcedureName]>(<[Foreach Parameter Comma]>:<[ActualParameterName]><[NextForeach]>)", parameters, transactionToUse)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>
			Return toReturn
		End Function
	<[NextForeach]>

#Region "Included Code"
<# Custom_ActionProceduresTemplate #>
#End Region
	End Class
End Namespace
