' ///////////////////////////////////////////////////////////////
' // This is generated code. 
' //
' // Do not try to run this code on another version of the database than the database
' // which was used to generate this code. This means that when you used f.e. SybaseAsa 2000
' // to generate this code, it is likely that you will not be able to use that code on
' // SybaseAsa 7 due to SQL syntax mismatches. 
' //////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // Code is generated on: <[Time]>
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' //////////////////////////////////////////////////////////////
Imports System
Imports System.Data
imports iAnywhere.Data.SQLAnywhere
Imports SD.LLBLGen.Pro.ORMSupportClasses

Namespace <[RootNamespace]><[DbSpecificNamespaceSuffix]>
	''' <summary>
	''' Class which contains the Shared logic to execute retrieval stored procedures in the database.
	''' </summary>
	Public Class RetrievalProcedures
		
		''' <summary>
		''' private CTor so no instance can be created.
		''' </summary>
		Private Sub New()
		End Sub

	<[Foreach RetrievalStoredProcedureCall CrLf]>
		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <returns>Filled DataSet with resultset(s) of stored procedure</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]>) As DataSet
			Dim adapter As New DataAccessAdapter()
			Try
				Return <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]> adapter)
			Finally
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="adapter">The DataAccessAdapter object to use for the call</param>
		''' <returns>Filled DataSet with resultset(s) of stored procedure</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>adapter As DataAccessAdapter ) As DataSet
			Dim parameters() As SAParameter = New SAParameter(<[AmountOfParameters]> - 1) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = New SAParameter("<[ActualParameterName]>", SADbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.<[CurrentParameterDirection]>, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = New SAParameter("<[ActualParameterName]>", SADbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.<[CurrentParameterDirection]>, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			Dim toReturn As DataSet = New DataSet()
			Dim hasSucceeded As Boolean = adapter.CallRetrievalStoredProcedure("[<[SourceSchemaName]>].[<[ActualStoredProcedureName]>]", parameters, toReturn)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>
			Return toReturn
		End Function

		''' <summary>Creates an IRetrievalQuery Object For a Call To the procedure '<[ActualStoredProcedureName]>'.
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter InputParameter]><[Foreach InputParameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <returns>IRetrievalQuery Object which Is ready To use For datafetching</returns>
		Public Shared Function Get<[CurrentSPCallName]>CallAsQuery( <[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]>) As IRetrievalQuery 
			Dim toReturn As New RetrievalQuery( New SACommand( "[<[SourceSchemaName]>].[<[ActualStoredProcedureName]>]" ) )
<[Foreach InputParameter CrLf]>			toReturn.Parameters.Add(New SAParameter("<[ActualParameterName]>", SADbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.<[CurrentParameterDirection]>, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>))<[NextForeach]>
<[Foreach OutputParameter CrLf]>			toReturn.Parameters.Add(New SAParameter("<[ActualParameterName]>", SADbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.<[CurrentParameterDirection]>, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, Nothing))<[NextForeach]>
			toReturn.Command.CommandType = CommandType.StoredProcedure
			Return toReturn
		End Function
	<[NextForeach]>

#Region "Included Code"
<# Custom_RetrievalProceduresAdapterTemplate #>
#End Region
	End Class
End Namespace
