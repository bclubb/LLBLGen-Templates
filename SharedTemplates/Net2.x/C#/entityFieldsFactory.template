///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated on: <[Time]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using <[RootNamespace]>;
using <[RootNamespace]>.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.FactoryClasses
{
	/// <summary>
	/// Generates IEntityFields instances for different kind of Entities. 
	/// This class is generated. Do not modify.
	/// </summary>
	public <[If UsePartialClasses]>partial <[EndIf]>class EntityFieldsFactory
	{
		/// <summary>
		/// Private CTor, no instantiation possible.
		/// </summary>
		private EntityFieldsFactory()
		{
		}

<[If HasEntity]>
		/// <summary>General factory entrance method which will return an EntityFields object with the format generated by the factory specified</summary>
		/// <param name="relatedEntityType">The type of entity the fields are for</param>
		/// <returns>The IEntityFields instance requested</returns>
		public static IEntityFields CreateEntityFieldsObject(<[RootNamespace]>.EntityType relatedEntityType)
		{
			IEntityFields fieldsToReturn=null;
			IInheritanceInfoProvider inheritanceProvider = InheritanceInfoProviderSingleton.GetInstance();
			IFieldInfoProvider fieldProvider = FieldInfoProviderSingleton.GetInstance();
			IPersistenceInfoProvider persistenceProvider = PersistenceInfoProviderSingleton.GetInstance();
			switch(relatedEntityType)
			{<[Foreach Entity]>
				case <[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity:
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "<[CurrentEntityName]>Entity");
					break;<[NextForeach]>
			}
			return fieldsToReturn;
		}
		
		/// <summary>General method which will return an array of IEntityFieldCore objects, used by the InheritanceInfoProvider. Only the fields defined in the entity are returned, no inherited fields.</summary>
		/// <param name="entityName">the name of the entity to get the fields for. Example: "CustomerEntity"</param>
		/// <returns>array of IEntityFieldCore fields, defined in the entity with the name specified</returns>
		internal static IEntityFieldCore[] CreateFields(string entityName)
		{
			IFieldInfoProvider fieldProvider = FieldInfoProviderSingleton.GetInstance();
			IPersistenceInfoProvider persistenceProvider = PersistenceInfoProviderSingleton.GetInstance();
			return fieldProvider.GetEntityFieldsArray(entityName, persistenceProvider);
		}<[EndIf]>
<[If HasTypedView]>
		/// <summary>General factory entrance method which will return a TypedView EntityFields object with the format generated by the factory specified</summary>
		/// <param name="relatedTypedViewType">The type of typed view the fields are for</param>
		/// <returns>The IEntityFields instance requested</returns>
		public static IEntityFields CreateTypedViewEntityFieldsObject(TypedViewType relatedTypedViewType)
		{
			IEntityFields fieldsToReturn=null;
			switch(relatedTypedViewType)
			{<[Foreach TypedView]>
				case TypedViewType.<[CurrentTypedViewName]>TypedView:
					fieldsToReturn = Create<[CurrentTypedViewName]>TypedViewEntityFields();
					break;<[NextForeach]>
			}
			return fieldsToReturn;
		}<[EndIf]>
<[Foreach TypedView CrLf]>
		/// <summary>Creates a complete EntityFields instance for the <[CurrentTypedViewName]>Entity.</summary>
		/// <returns></returns>
		private static IEntityFields Create<[CurrentTypedViewName]>TypedViewEntityFields()
		{
			IEntityFields fieldsToReturn = new EntityFields((int)<[CurrentTypedViewName]>FieldIndex.AmountOfFields, null, FieldInfoProviderSingleton.GetInstance().GetFieldIndexes("<[CurrentTypedViewName]>TypedView"));
			for(int i=0;i<(int)<[CurrentTypedViewName]>FieldIndex.AmountOfFields;i++)
			{
				fieldsToReturn[i] = EntityFieldFactory.Create((<[CurrentTypedViewName]>FieldIndex)i);
			}
			return fieldsToReturn;
		}<[NextForeach]>

		#region Included Code
<# Custom_EntityFieldsFactoryTemplate #>
		#endregion
	}
}
