///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated on: <[Time]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using <[RootNamespace]>;
using <[RootNamespace]>.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.FactoryClasses
{
	/// <summary>
	/// Factory class for IEntityField instances, used in IEntityFields instances.
	/// </summary>
	public <[If UsePartialClasses]>partial <[EndIf]>class EntityFieldFactory
	{
		/// <summary>
		/// Private CTor, no instantiation possible.
		/// </summary>
		private EntityFieldFactory()
		{
		}
<[Foreach Entity CrLf]>
		/// <summary>Creates a new IEntityField instance for usage in the EntityFields object for the <[CurrentEntityName]>Entity.  Which EntityField is created is specified by fieldIndex</summary>
		/// <param name="fieldIndex">The field which IEntityField instance should be created</param>
		/// <returns>The IEntityField instance for the field specified in fieldIndex</returns>
		public static IEntityField Create(<[CurrentEntityName]>FieldIndex fieldIndex)
		{
			IFieldInfo info = FieldInfoProviderSingleton.GetInstance().GetFieldInfo("<[CurrentEntityName]>Entity", (int)fieldIndex);
			return new EntityField(info, PersistenceInfoProviderSingleton.GetInstance().GetFieldPersistenceInfo(info.ContainingObjectName, info.Name));
		}<[NextForeach]>
<[Foreach TypedView CrLf]>
		/// <summary>Creates a new IEntityField instance for usage in the EntityFields object for the <[CurrentTypedViewName]> TypedView. Which EntityField is created is specified by fieldIndex</summary>
		/// <param name="fieldIndex">The field which IEntityField instance should be created</param>
		/// <returns>The IEntityField instance for the field specified in fieldIndex</returns>
		public static IEntityField Create(<[CurrentTypedViewName]>FieldIndex fieldIndex)
		{
			return new EntityField(FieldInfoProviderSingleton.GetInstance().GetFieldInfo("<[CurrentTypedViewName]>TypedView", (int)fieldIndex), PersistenceInfoProviderSingleton.GetInstance().GetFieldPersistenceInfo("<[CurrentTypedViewName]>TypedView", fieldIndex.ToString()));
		}<[NextForeach]>

		/// <summary>Creates a new IEntityField instance, which represents the field objectName.fieldName</summary>
		/// <param name="objectName">the name of the object the field belongs to, like CustomerEntity or OrdersTypedView</param>
		/// <param name="fieldName">the name of the field to create</param>
		public static IEntityField Create(string objectName, string fieldName)
        {
			return new EntityField(FieldInfoProviderSingleton.GetInstance().GetFieldInfo(objectName, fieldName), PersistenceInfoProviderSingleton.GetInstance().GetFieldPersistenceInfo(objectName, fieldName));
        }

		#region Included Code
<# Custom_EntityFieldFactoryTemplate #>
		#endregion
	}
}
