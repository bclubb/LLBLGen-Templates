///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated on: <[Time]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Schema;
using System.Xml.Serialization;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Xml.Serialization.Advanced;

namespace <[RootNamespace]>.SchemaImporter
{
	/// <summary>
	/// Generic schema importer for wsdl support so a webservice build with this generated code will result in a stub class with properly typed parameters instead of 'DataSet'.
	/// </summary>
    public class EntityClassesSchemaImporter : SchemaImporterExtension
    {
		/// <summary>
		/// Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.
		/// </summary>
		/// <param name="type">An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> that represents the XSD type.</param>
		/// <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that represents schema information, such as the line number of the XML element.</param>
		/// <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas in the document.</param>
		/// <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
		/// <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
		/// <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
		/// <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
		/// <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is used to generate the new code.</param>
		/// <returns>
		/// The name of the CLR type that this maps to.
		/// </returns>
        public override string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, 
                CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
        {
            return null;
        }


		/// <summary>
		/// Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.
		/// </summary>
		/// <param name="name">The name of the element.</param>
		/// <param name="ns">The namespace of the element.</param>
		/// <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that represents schema information, such as the line number of the XML element.</param>
		/// <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas in the document.</param>
		/// <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
		/// <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
		/// <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
		/// <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
		/// <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is used to generate the new code.</param>
		/// <returns>
		/// The name of the CLR type that this maps to.
		/// </returns>
        public override string ImportSchemaType(string name, string ns, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, 
            CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
        {
            if (ns.Equals("http://<[RootNamespace]>/xml/serialization"))
            {
                switch (name)
                {
					#region Entity Classes				
<[Foreach Entity]>
                    case "<[CurrentEntityName]>Entity":
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll");
                        mainNamespace.Imports.Add(new CodeNamespaceImport("<[RootNamespace]>.EntityClasses"));
                        return "<[RootNamespace]>.EntityClasses.<[CurrentEntityName]>Entity";
                    <[NextForeach]>
					#endregion
					
					#region EntityCollection
                    case "EntityCollection":
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll");
                        mainNamespace.Imports.Add(new CodeNamespaceImport("<[RootNamespace]>.HelperClasses"));
                        return "<[RootNamespace]>.HelperClasses.EntityCollection";
					#endregion
					
					#region TypedLists
<[Foreach TypedList]>
                    case "<[CurrentTypedListName]>TypedList":
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll");
                        mainNamespace.Imports.Add(new CodeNamespaceImport("<[RootNamespace]>.TypedListClasses"));
                        return "<[RootNamespace]>.TypedListClasses.<[CurrentTypedListName]>TypedList";
                    <[NextForeach]>
					#endregion

					#region TypedViews
<[Foreach TypedView]>
                    case "<[CurrentTypedViewName]>TypedView":
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll");
                        mainNamespace.Imports.Add(new CodeNamespaceImport("<[RootNamespace]>.TypedViewClasses"));
                        return "<[RootNamespace]>.TypedViewClasses.<[CurrentTypedViewName]>TypedView";
                    <[NextForeach]>
					#endregion
                }
            }
            return null;
        }
    }
}