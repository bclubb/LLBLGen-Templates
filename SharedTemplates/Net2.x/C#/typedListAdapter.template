///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated on: <[Time]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Data;
using System.Collections;
#if !CF
using System.Runtime.Serialization;
#endif

using <[RootNamespace]>.EntityClasses;
using <[RootNamespace]>.HelperClasses;
using <[RootNamespace]>.FactoryClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.TypedListClasses
{
	<[ UserCodeRegion "AdditionalNamespaces" ]>
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	<[ EndUserCodeRegion ]>

	/// <summary>
	/// Typed datatable for the list '<[CurrentTypedListName]>'.<br/><br/>
	/// <[Foreach CustomProperty TypedList]>
	/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
	/// </summary>
	/// <remarks>
	/// The code doesn't support any changing of data. Users who do that are on their own.
	/// It also doesn't support any event throwing. This list should be used as a base for readonly databinding
	/// or dataview construction.
	/// </remarks>
#if !CF	
	[Serializable, System.ComponentModel.DesignerCategory("Code")]
	[ToolboxItem(true)]
	[DesignTimeVisible(true)]
#endif	
	public <[If UsePartialClasses]>partial <[EndIf]>class <[CurrentTypedListName]>TypedList : TypedListBase2<<[CurrentTypedListName]>Row>, ITypedListLgp2<[ UserCodeRegion "AdditionalInterfacesList" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfacesList
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>	
	{
		#region Class Member Declarations
<[Foreach TypedListField CrLf]>		private DataColumn _column<[TypedListFieldName]>;<[NextForeach]>
		private ResultsetFields _fields;
		private IRelationPredicateBucket _filterBucket;
		<[ UserCodeRegion "AdditionalMembers" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
		private static Hashtable	_customProperties;
		private static Hashtable	_fieldsCustomProperties;
		#endregion

		#region Class Constants
		/// <summary>The amount of fields in the resultset.</summary>
		private const int AmountOfFields = <[AmountOfTypedListFields]>;
		#endregion


		/// <summary>Static CTor for setting up custom property hashtables. Is executed before the first instance of this
		/// class or derived classes is constructed. </summary>
		static <[CurrentTypedListName]>TypedList()
		{
			SetupCustomPropertyHashtables();
		}
		

		/// <summary>CTor</summary>
		public <[CurrentTypedListName]>TypedList():base("<[CurrentTypedListName]>")
		{
			InitClass(false);
		}
		
		
		/// <summary>CTor</summary>
		/// <param name="obeyWeakRelations">The flag to signal the collection what kind of join statements to generate in the
		/// query statement. Weak relationships are relationships which are optional, for example a
		/// customer with no orders is possible, because the relationship between customer and order is based on a field in order.
		/// When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
		/// set to false (which is the default), INNER JOIN statements are used.
		/// </param>
		public <[CurrentTypedListName]>TypedList(bool obeyWeakRelations):base("<[CurrentTypedListName]>")
		{
			InitClass(obeyWeakRelations);
		}
		
		
#if !CF	
		/// <summary>Protected constructor for deserialization.</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected <[CurrentTypedListName]>TypedList(SerializationInfo info, StreamingContext context):base(info, context)
		{
			if(SerializationHelper.Optimization == SerializationOptimization.None)
			{
				InitMembers();
				BuildResultset();
			}
		}
#endif		

		/// <summary>Gets the IEntityFields2 collection of fields of this typed list. Use this method in combination with the FetchTypedList() methods in 
		/// DataAccessAdapter.</summary>
		/// <returns>Ready to use IEntityFields2 collection object.</returns>
		public virtual IEntityFields2 GetFieldsInfo()
		{
			return _fields;
		}


		/// <summary>Gets the IRelationPredicateBucket object which contains the relation information for this Typed List. Use this method in combination with the 
		/// FetchTypedList() methods in DataAccessAdapter.</summary>
		/// <returns>Ready to use IRelationPredicateBucket object.</returns>
		public virtual IRelationPredicateBucket GetRelationInfo()
		{
			_filterBucket = new RelationPredicateBucket();
			BuildRelationSet();
			return _filterBucket;
		}

		/// <summary>Creates a new typed row during the build of the datatable during a Fill session by a dataadapter.</summary>
		/// <param name="rowBuilder">supplied row builder to pass to the typed row</param>
		/// <returns>the new typed datarow</returns>
		protected override DataRow NewRowFromBuilder(DataRowBuilder rowBuilder) 
		{
			return new <[CurrentTypedListName]>Row(rowBuilder);
		}


		/// <summary>Initializes the hashtables for the typed list type and typed list field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_customProperties = new Hashtable();
			_fieldsCustomProperties = new Hashtable();
<[Foreach CustomProperty TypedList CrLf]>			_customProperties.Add("<[CustomPropertyName]>", "<[CustomPropertyValue]>");<[NextForeach]>
			Hashtable fieldHashtable = null;
<[Foreach TypedListField]>
			fieldHashtable = new Hashtable();
<[Foreach CustomProperty TypedListField CrLf]>			fieldHashtable.Add("<[CustomPropertyName]>", "<[CustomPropertyValue]>");<[NextForeach]>
			_fieldsCustomProperties.Add("<[TypedListFieldName]>", fieldHashtable);<[NextForeach]>			
		}


		/// <summary>Builds the relation set for this typed list, inside the filterBucket object.</summary>
		private void BuildRelationSet()
		{
			_filterBucket.Relations.ObeyWeakRelations = base.ObeyWeakRelations;
<[Foreach EntityRelation CrLf]>			_filterBucket.Relations.Add(<[RelationStartPointName]>Entity.Relations.<[RelationEndPointName]>EntityUsing<[If RelationType ManyToOne]><[If Not RelatedEntityIsOtherEntity]><[Foreach RelationField]><[RelatedEntityRelationFieldName]><[NextForeach]><[EndIf]><[Foreach RelationField]><[RelationFieldName]><[NextForeach]><[EndIf]><[If RelationType OneToOne]><[Foreach RelationField]><[If IsOneToOnePkPk FkSide]><[RelationFieldName]><[EndIf]><[If Not IsOneToOnePkPk FkSide]><[RelatedEntityRelationFieldName]><[EndIf]><[If IsOneToOnePkFkUc FkSide]><[RelationFieldName]><[EndIf]><[If Not IsOneToOnePkFkUc FkSide]><[RelatedEntityRelationFieldName]><[EndIf]><[NextForeach]><[EndIf]><[If RelationType OneToMany]><[Foreach RelationField]><[RelatedEntityRelationFieldName]><[NextForeach]><[EndIf]>, "<[ StartEntityAlias ]>", "<[ EndEntityAlias ]>", JoinHint.<[ JoinHint ]>);<[NextForeach]>
			<[ UserCodeRegion "AdditionalRelations" ]>
			// __LLBLGENPRO_USER_CODE_REGION_START AdditionalRelations
			// __LLBLGENPRO_USER_CODE_REGION_END
			<[ EndUserCodeRegion ]>
			OnRelationSetBuilt(_filterBucket.Relations);
		}


		/// <summary>Builds the resultset fields, stored in the private _fields object</summary>
		private void BuildResultset()
		{
			_fields = new ResultsetFields(AmountOfFields);
<[Foreach TypedListField CrLf]>			_fields.DefineField(<[TypedListFieldEntityName]>Fields.<[EntityFieldName]>, <[FieldIndex]>, "<[TypedListFieldName]>", "<[ EntityAlias ]>", AggregateFunction.<[ AggregateFunction ]>);<[NextForeach]>
			<[ UserCodeRegion "AdditionalFields" ]>
			// __LLBLGENPRO_USER_CODE_REGION_START AdditionalFields
			// be sure to call _fields.Expand(number of new fields) first. 
			// __LLBLGENPRO_USER_CODE_REGION_END
			<[ EndUserCodeRegion ]>
			OnResultsetBuilt(_fields);
		}


		/// <summary>Initialize the datastructures.</summary>
		/// <param name="obeyWeakRelations">flag for the internal used relations object</param>
		protected override void InitClass(bool obeyWeakRelations)
		{
			TableName = "<[CurrentTypedListName]>";		
			base.ObeyWeakRelations = obeyWeakRelations;
<[Foreach TypedListField]>
			_column<[TypedListFieldName]> = new DataColumn("<[TypedListFieldName]>", typeof(<[TypeOfTypedListField]>), null, MappingType.Element);
			_column<[TypedListFieldName]>.ReadOnly = true;
			_column<[TypedListFieldName]>.Caption = @"<[ FieldCaption ]>";
			this.Columns.Add(_column<[TypedListFieldName]>);<[NextForeach]>
			<[ UserCodeRegion "InitClass" ]>
			// __LLBLGENPRO_USER_CODE_REGION_START InitClass
			// __LLBLGENPRO_USER_CODE_REGION_END
			<[ EndUserCodeRegion ]>

			BuildResultset();
			_filterBucket = new RelationPredicateBucket();
			BuildRelationSet();
			OnInitialized();
		}


		/// <summary>Initializes the members, after a clone action.</summary>
		private void InitMembers()
		{
<[Foreach TypedListField CrLf]>			_column<[TypedListFieldName]> = this.Columns["<[TypedListFieldName]>"];<[NextForeach]>
			<[ UserCodeRegion "InitMembers" ]>
			// __LLBLGENPRO_USER_CODE_REGION_START InitMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			<[ EndUserCodeRegion ]>
			OnInitialized();
		}


		/// <summary>Return the type of the typed datarow</summary>
		/// <returns>returns the requested type</returns>
		protected override Type GetRowType() 
		{
			return typeof(<[CurrentTypedListName]>Row);
		}


		/// <summary>Clones this instance.</summary>
		/// <returns>A clone of this instance</returns>
		public override DataTable Clone() 
		{
			<[CurrentTypedListName]>TypedList cloneToReturn = ((<[CurrentTypedListName]>TypedList)(base.Clone()));
			cloneToReturn.InitMembers();
			return cloneToReturn;
		}
		
#if !CF
		/// <summary>Creates a new instance of the DataTable class.</summary>
		/// <returns>a new instance of a datatable with this schema.</returns>
		protected override DataTable CreateInstance() 
		{
			return new <[CurrentTypedListName]>TypedList();
		}
#endif

		#region Class Property Declarations
		/// <summary>Returns the amount of rows in this typed list.</summary>
		[System.ComponentModel.Browsable(false)]
		public override int Count 
		{
			get 
			{
				return this.Rows.Count;
			}
		}
		
		/// <summary>The custom properties for this TypedList type.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public static Hashtable CustomProperties
		{
			get { return _customProperties;}
		}

		/// <summary>The custom properties for the type of this TypedList instance.</summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[System.ComponentModel.Browsable(false)]
		public virtual Hashtable CustomPropertiesOfType
		{
			get { return <[CurrentTypedListName]>TypedList.CustomProperties;}
		}

		/// <summary>The custom properties for the fields of this TypedList type. The returned Hashtable contains per fieldname a hashtable of name-value
		/// pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public static Hashtable FieldsCustomProperties
		{
			get { return _fieldsCustomProperties;}
		}

		/// <summary>The custom properties for the fields of the type of this TypedList instance. The returned Hashtable contains per fieldname a hashtable of name-value
		/// pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		[System.ComponentModel.Browsable(false)]
		public virtual Hashtable FieldsCustomPropertiesOfType
		{
			get { return <[CurrentTypedListName]>TypedList.FieldsCustomProperties;}
		}

		/// <summary>Indexer of this strong typed list</summary>
		public <[CurrentTypedListName]>Row this[int index] 
		{
			get 
			{
				return ((<[CurrentTypedListName]>Row)(this.Rows[index]));
			}
		}
		
		/// <summary>Gets an array of all <[CurrentTypedListName]>Row objects.</summary>
		/// <returns>Array with <[CurrentTypedListName]>Row objects</returns>
		public new <[CurrentTypedListName]>Row[] Select()
		{
			return (<[CurrentTypedListName]>Row[])base.Select();
		}


		/// <summary>Gets an array of all <[CurrentTypedListName]>Row objects that match the filter criteria in order of primary key (or lacking one, order of addition.) </summary>
		/// <param name="filterExpression">The criteria to use to filter the rows.</param>
		/// <returns>Array with <[CurrentTypedListName]>Row objects</returns>
		public new <[CurrentTypedListName]>Row[] Select(string filterExpression)
		{
			return (<[CurrentTypedListName]>Row[])base.Select(filterExpression);
		}


		/// <summary>Gets an array of all <[CurrentTypedListName]>Row objects that match the filter criteria, in the specified sort order</summary>
		/// <param name="filterExpression">The filter expression.</param>
		/// <param name="sort">A string specifying the column and sort direction.</param>
		/// <returns>Array with <[CurrentTypedListName]>Row objects</returns>
		public new <[CurrentTypedListName]>Row[] Select(string filterExpression, string sort)
		{
			return (<[CurrentTypedListName]>Row[])base.Select(filterExpression, sort);
		}


		/// <summary>Gets an array of all <[CurrentTypedListName]>Row objects that match the filter criteria, in the specified sort order that match the specified state</summary>
		/// <param name="filterExpression">The filter expression.</param>
		/// <param name="sort">A string specifying the column and sort direction.</param>
		/// <param name="recordStates">One of the <see cref="System.Data.DataViewRowState"/> values.</param>
		/// <returns>Array with <[CurrentTypedListName]>Row objects</returns>
		public new <[CurrentTypedListName]>Row[] Select(string filterExpression, string sort, DataViewRowState recordStates)
		{
			return (<[CurrentTypedListName]>Row[])base.Select(filterExpression, sort, recordStates);
		}

	<[Foreach TypedListField]>
		/// <summary>Returns the column object belonging to the TypedList field <[TypedListFieldName]></summary>
		internal DataColumn <[TypedListFieldName]>Column 
		{
			get { return _column<[TypedListFieldName]>; }
		}
    <[NextForeach]>
		<[ UserCodeRegion "AdditionalColumnProperties" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalColumnProperties
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
 		#endregion

		#region Custom TypedList code
		<[ UserCodeRegion "CustomTypedListCode" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START CustomTypedListCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
		#endregion

		#region Included Code
<# Custom_TypedListAdapterTemplate #>
		#endregion
	}


	/// <summary>
	/// Typed datarow for the typed datatable <[CurrentTypedListName]>
	/// </summary>
	public <[If UsePartialClasses]>partial <[EndIf]>class <[CurrentTypedListName]>Row : DataRow<[ UserCodeRegion "AdditionalInterfacesRow" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfacesRow
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>	
	{
		#region Class Member Declarations
		private <[CurrentTypedListName]>TypedList	_parent;
		#endregion

		/// <summary>CTor</summary>
		/// <param name="rowBuilder">Row builder object to use when building this row</param>
		protected internal <[CurrentTypedListName]>Row(DataRowBuilder rowBuilder) : base(rowBuilder) 
		{
			_parent = ((<[CurrentTypedListName]>TypedList)(this.Table));
		}


		#region Class Property Declarations
	<[Foreach TypedListField CrLf]>
		/// <summary>Gets / sets the value of the TypedList field <[TypedListFieldName]><br/><br/>
		/// <[Foreach CustomProperty TypedListField]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]></summary>
		/// <remarks>Mapped on: <[ If EntityIsAliased ]><[ EntityAlias ]>.<[EntityFieldName]>. <[ EntityAlias ]> is an alias for <[EntityFieldEntityName]><[ EndIf ]><[ If Not EntityIsAliased ]><[EntityFieldEntityName]>.<[EntityFieldName]><[ EndIf ]></remarks>
		public <[TypeOfTypedListField]> <[TypedListFieldName]> 
		{
			get 
			{
				if(Is<[TypedListFieldName]>Null())
				{
					return (<[TypeOfTypedListField]>)TypeDefaultValue.GetDefaultValue(typeof(<[TypeOfTypedListField]>));
				}
				else
				{
					return (<[TypeOfTypedListField]>)this[_parent.<[TypedListFieldName]>Column];
				}
			}
			set 
			{
				this[_parent.<[TypedListFieldName]>Column] = value;
			}
		}

		/// <summary>Returns true if the TypedList field <[TypedListFieldName]> is NULL, false otherwise.</summary>
		public bool Is<[TypedListFieldName]>Null() 
		{
			return IsNull(_parent.<[TypedListFieldName]>Column);
		}

		/// <summary>Sets the TypedList field <[TypedListFieldName]> to NULL. Not recommended; a typed list should be used as a readonly object.</summary>
    	public void Set<[TypedListFieldName]>Null() 
		{
			this[_parent.<[TypedListFieldName]>Column] = System.Convert.DBNull;
		}

	<[NextForeach]>
		#endregion

		#region Custom Typed List Row Code
		<[ UserCodeRegion "CustomTypedListRowCode" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START CustomTypedListRowCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
		#endregion
	}
}
