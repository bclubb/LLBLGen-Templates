' ///////////////////////////////////////////////////////////////
' This is generated code. 
' //////////////////////////////////////////////////////////////
' Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' 
' 
' Code is generated using templates: <[TemplateName]>
' Templates vendor: Solutions Design.
' Templates version: <[TemplateVersion]>
' //////////////////////////////////////////////////////////////
Imports System
Imports System.Collections.Generic
Imports System.Text
Imports System.Xml.Schema
Imports System.Xml.Serialization
Imports System.CodeDom
Imports System.CodeDom.Compiler
Imports System.Xml.Serialization.Advanced

Namespace <[RootNamespace]>.SchemaImporter

	''' <summary>
	''' Generic schema importer for wsdl support so a webservice build with this generated code will result in a stub class with properly typed parameters instead of 'DataSet'.
	''' </summary>
    Public Class EntityClassesSchemaImporter 
		Inherits SchemaImporterExtension
    
    	''' <summary>
		''' Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.
		''' </summary>
		''' <param name="type">An <see cref="T:System.Xml.Schema.XmlSchemaType"></see> that represents the XSD type.</param>
		''' <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that represents schema information, such as the line number of the XML element.</param>
		''' <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas in the document.</param>
		''' <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
		''' <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
		''' <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
		''' <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
		''' <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is used to generate the new code.</param>
		''' <returns>
		''' The name of the CLR type that this maps to.
		''' </returns>
		Public Overrides Function ImportSchemaType ( type As XmlSchemaType, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String
            Return Nothing
        End Function


		''' <summary>
		''' Allows you to manipulate the code generated by examining the imported schema and specifying the CLR type that it maps to.
		''' </summary>
		''' <param name="name">The name of the element.</param>
		''' <param name="schemaNamespace">The namespace of the element.</param>
		''' <param name="context">An <see cref="T:System.Xml.Schema.XmlSchemaObject"></see> that represents schema information, such as the line number of the XML element.</param>
		''' <param name="schemas">An <see cref="T:System.Xml.Serialization.XmlSchemas"></see> that contains the collection of schemas in the document.</param>
		''' <param name="importer">The <see cref="T:System.Xml.Serialization.XmlSchemaImporter"></see> that is the importer being used.</param>
		''' <param name="compileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"></see> to which you can add CodeDOM structures to generate alternative code for the XSD.</param>
		''' <param name="mainNamespace">A <see cref="T:System.CodeDom.CodeNamespace"></see> that represents the current namespace for the element.</param>
		''' <param name="options">A <see cref="T:System.Xml.Serialization.CodeGenerationOptions"></see> for the setting options on the code compiler.</param>
		''' <param name="codeProvider">A <see cref="T:System.CodeDom.Compiler.CodeDomProvider"></see> that is used to generate the new code.</param>
		''' <returns>
		''' The name of the CLR type that this maps to.
		''' </returns>
		Public Overrides Function ImportSchemaType ( name As String, schemaNamespace As String, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String
            If schemaNamespace.Equals("http://<[RootNamespace]>/xml/serialization") Then
                Select Case name
<[Foreach Entity]>
                    Case "<[CurrentEntityName]>Entity"
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll")
                        mainNamespace.Imports.Add(new CodeNamespaceImport("<[RootNamespace]>.EntityClasses"))
                        Return "<[RootNamespace]>.EntityClasses.<[CurrentEntityName]>Entity"
                    <[NextForeach]>

                    Case "EntityCollection"
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll")
                        mainNamespace.Imports.Add(New CodeNamespaceImport("<[RootNamespace]>.HelperClasses"))
                        Return "<[RootNamespace]>.HelperClasses.EntityCollection"

<[Foreach TypedList]>
                    Case "<[CurrentTypedListName]>TypedList"
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll")
                        mainNamespace.Imports.Add(New CodeNamespaceImport("<[RootNamespace]>.TypedListClasses"))
                        Return "<[RootNamespace]>.TypedListClasses.<[CurrentTypedListName]>TypedList"
                    <[NextForeach]>

<[Foreach TypedView]>
                    Case "<[CurrentTypedViewName]>TypedView"
                        compileUnit.ReferencedAssemblies.Add("<[RootNamespace]>.dll")
                        mainNamespace.Imports.Add(New CodeNamespaceImport("<[RootNamespace]>.TypedViewClasses"))
                        Return "<[RootNamespace]>.TypedViewClasses.<[CurrentTypedViewName]>TypedView"
                    <[NextForeach]>
                End Select
            End If
            Return Nothing
        End Function
    End Class
End Namespace
