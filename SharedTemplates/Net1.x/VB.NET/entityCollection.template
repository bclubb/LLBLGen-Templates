' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // Code is generated on: <[Time]>
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports System.Collections
Imports System.ComponentModel
Imports System.Xml
Imports System.Runtime.Serialization

Imports <[RootNamespace]>.EntityClasses
Imports <[RootNamespace]>.FactoryClasses
Imports <[RootNamespace]>.DaoClasses
Imports <[RootNamespace]>.HelperClasses

Imports SD.LLBLGen.Pro.ORMSupportClasses
<[ UserCodeRegion "AdditionalNamespaces" ]>
' __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
' __LLBLGENPRO_USER_CODE_REGION_END
<[ EndUserCodeRegion ]>
Namespace <[RootNamespace]>.CollectionClasses
	''' <summary>
	''' Collection class for storing and retrieving collections of <[CurrentEntityName]>Entity objects. 
	''' </summary>
	<Serializable()> _
	Public Class <[CurrentEntityName]>Collection 
		Inherits <[If IsSubType]><[SuperTypeName]>Collection<[Else]>EntityCollectionBase<[EndIf]>
	
		''' <summary>CTor</summary>
		Public Sub New()
			MyBase.New(New <[CurrentEntityName]>EntityFactory())
		End Sub


		''' <summary>CTor</summary>
		''' <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
		Public Sub New(entityFactoryToUse As IEntityFactory)
			MyBase.New(entityFactoryToUse)
		End Sub


		''' <summary>Private CTor for deserialization</summary>
		''' <param name="info"></param>
		''' <param name="context"></param>
		Protected Sub New(info As SerializationInfo, context As StreamingContext)
			MyBase.New(info, context)
		End Sub

	<[If HasRelation ManyToOne]>
		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which have data in common
		''' with the specified related Entities.
		''' If one is omitted, that entity is not used as a filter. All current elements in the collection are removed from the collection.</summary>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		''' <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to Return</param><[NextForeach]>
		''' <returns>true if succeeded, false otherwise</returns>
		Public Overloads Function GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance As IEntity<[NextForeach]>) As Boolean
			Return GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, MyBase.MaxNumberOfItemsToReturn, MyBase.SortClauses, Nothing, 0, 0)
		End Function


		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which have data in common
		''' with the specified related Entities.
		''' If one is omitted, that entity is not used as a filter. All current elements in the collection are removed from the collection.</summary>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		''' <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to Return</param><[NextForeach]>
		''' <param name="filter">Extra filter to limit the resultset. Predicate expression can be Nothing, in which case it will be ignored.</param>
		''' <returns>true if succeeded, false otherwise</returns>
		Public Overloads Function GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance As IEntity<[NextForeach]>, Filter As IPredicateExpression) As Boolean
			Return GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, MyBase.MaxNumberOfItemsToReturn, MyBase.SortClauses, Filter, 0, 0)
		End Function


		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which have data in common
		''' with the specified related Entities.
		''' If one is omitted, that entity is not used as a filter. All current elements in the collection are removed from the collection.</summary>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		''' <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to Return</param><[NextForeach]>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <param name="filter">Extra filter to limit the resultset. Predicate expression can be Nothing, in which case it will be ignored.</param>
		''' <returns>true if succeeded, false otherwise</returns>
		Public Overloads Function GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance As IEntity<[NextForeach]>, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression, Filter As IPredicateExpression) As Boolean
			Return GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, maxNumberOfItemsToReturn, sortClauses, Filter, 0, 0)
		End Function


		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which have data in common
		''' with the specified related Entities.
		''' If one is omitted, that entity is not used as a filter. All current elements in the collection are removed from the collection.</summary>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		''' <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to Return</param><[NextForeach]>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <param name="filter">Extra filter to limit the resultset. Predicate expression can be Nothing, in which case it will be ignored.</param>
		''' <param name="pageNumber">The page number to retrieve.</param>
		''' <param name="pageSize">The page size of the page to retrieve.</param>
		''' <returns>true if succeeded, false otherwise</returns>
		Public Overloads Overridable Function GetMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance As IEntity<[NextForeach]>, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression, Filter As IPredicateExpression, pageNumber As Integer, pageSize As Integer) As Boolean
			Dim validParameters As Boolean = False
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>			validParameters = validParameters Or Not (<[CaseCamel MappedFieldNameRelation]>Instance Is Nothing)<[NextForeach]>
			If Not validParameters Then
				Return GetMulti(Filter, maxNumberOfItemsToReturn, sortClauses, Nothing, pageNumber, pageSize)
			End If
			If Not MyBase.SuppressClearInGetMulti Then
				Me.Clear()
			End If
			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.GetMulti(MyBase.Transaction, Me, maxNumberOfItemsToReturn, sortClauses, MyBase.EntityFactoryToUse, Filter, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, pageNumber, pageSize)
		End Function

		''' <summary>Deletes from the persistent storage all <[CurrentEntityName]> entities which have data in common
		''' with the specified related Entities.
		''' If one is omitted, that entity is not used as a filter.</summary>
		''' <remarks>Runs directly on the persistent storage. It will not delete entity objects from the current collection.</remarks>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		''' <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to Return</param><[NextForeach]>
		''' <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
		Public Overloads Function DeleteMultiManyToOne(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance As IEntity<[NextForeach]>) As Integer
			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.DeleteMulti(MyBase.Transaction, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>)
		End Function


		''' <summary>Updates in the persistent storage all <[CurrentEntityName]> entities which have data in common with the specified related Entities.
		''' If one is omitted, that entity is not used as a filter.
		''' Which fields are updated in those matching entities depends on which fields are
		''' <i>changed</i> in the passed in entity entityWithNewValues. The new values of these fields are read from entityWithNewValues. </summary>
		''' <param name="entityWithNewValues"><[CurrentEntityName]>Entity instance which holds the new values for the matching entities to update. Only
		''' changed fields are taken into account</param>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		''' <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to Return</param><[NextForeach]>
		''' <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
		Public Overloads Function UpdateMultiManyToOne(entityWithNewValues As <[CurrentEntityName]>Entity, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance As IEntity<[NextForeach]>) As Integer
			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.UpdateMulti(entityWithNewValues, MyBase.Transaction, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>)
		End Function
	<[EndIf]>
	<[Foreach RelatedEntity ManyToMany]><[If Not MappedFieldRelationIsHidden]>
		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which are related via a 
		''' Relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		''' All current elements in the collection are removed from the collection.</summary>
		''' <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity Object to be used as a filter in the m:n relation</param>
		''' <returns>true if the retrieval succeeded, false otherwise</returns>
		Public Function GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance As IEntity) As Boolean
			Return GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance, MyBase.MaxNumberOfItemsToReturn, MyBase.SortClauses, 0, 0)
		End Function
		

		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which are related via a 
		''' relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		''' All current elements in the collection are removed from the collection.</summary>
		''' <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity Object to be used as a filter in the m:n relation</param>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <returns>true if the retrieval succeeded, false otherwise</returns>
		Public Function GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance As IEntity, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression) As Boolean
			Return GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance, maxNumberOfItemsToReturn, sortClauses, 0, 0)
		End Function


		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which are related via a 
		''' relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		''' All current elements in the collection are removed from the collection.</summary>
		''' <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity Object to be used as a filter in the m:n relation</param>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <param name="pageNumber">The page number to retrieve.</param>
		''' <param name="pageSize">The page size of the page to retrieve.</param>
		''' <returns>true if the retrieval succeeded, false otherwise</returns>
		Public Function GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance As IEntity, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression, pageNumber As Integer, pageSize As Integer) As Boolean
			If Not MyBase.SuppressClearInGetMulti Then
				Me.Clear()
			End If

			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.GetMultiUsing<[MappedFieldNameRelation]>(MyBase.Transaction, Me, maxNumberOfItemsToReturn, sortClauses, MyBase.EntityFactoryToUse, <[CaseCamel RelatedEntityName]>Instance, pageNumber, pageSize)
		End Function


		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which are related via a 
		''' Relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		''' All current elements in the collection are removed from the collection.</summary>
		''' <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity Object to be used as a filter in the m:n relation</param>
		''' <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
		''' <returns>true if the retrieval succeeded, false otherwise</returns>
		Public Function GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance As IEntity, prefetchPathToUse As IPrefetchPath) As Boolean
			Return GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance, MyBase.MaxNumberOfItemsToReturn, MyBase.SortClauses, prefetchPathToUse)
		End Function


		''' <summary>Retrieves in this <[CurrentEntityName]>Collection Object all <[CurrentEntityName]>Entity objects which are related via a 
		''' relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		''' All current elements in the collection are removed from the collection.</summary>
		''' <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity Object to be used as a filter in the m:n relation</param>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
		''' <returns>true if the retrieval succeeded, false otherwise</returns>
		Public Overridable Function GetMultiManyToManyUsing<[MappedFieldNameRelation]>(<[CaseCamel RelatedEntityName]>Instance As IEntity, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression, prefetchPathToUse As IPrefetchPath) As Boolean
			If Not MyBase.SuppressClearInGetMulti Then
				Me.Clear()
			End If

			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.GetMultiUsing<[MappedFieldNameRelation]>(MyBase.Transaction, Me, maxNumberOfItemsToReturn, sortClauses, MyBase.EntityFactoryToUse, <[CaseCamel RelatedEntityName]>Instance, prefetchPathToUse)
		End Function
	<[EndIf]><[NextForeach]>

		''' <summary>Retrieves <[CurrentEntityName]>Entity rows in a datatable which match the specified filter. It will always create a new connection to the database.</summary>
		''' <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <returns>DataTable with the rows requested.</returns>
		Public <[If IsSubType]>Shadows<[EndIf]> Shared Function GetMultiAsDataTable(selectFilter As IPredicate, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression) As DataTable
			Return GetMultiAsDataTable(selectFilter, maxNumberOfItemsToReturn, sortClauses, Nothing, 0, 0)
		End Function


		''' <summary>Retrieves <[CurrentEntityName]>Entity rows in a datatable which match the specified filter. It will always create a new connection to the database.</summary>
		''' <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <param name="relations">The set of relations to walk to construct to total query.</param>
		''' <returns>DataTable with the rows requested.</returns>
		Public <[If IsSubType]>Shadows<[EndIf]> Shared Function GetMultiAsDataTable(selectFilter As IPredicate, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression, relations As IRelationCollection) As DataTable
			Return GetMultiAsDataTable(selectFilter, maxNumberOfItemsToReturn, sortClauses, relations, 0, 0)
		End Function


		''' <summary>Retrieves <[CurrentEntityName]>Entity rows in a datatable which match the specified filter. It will always create a new connection to the database.</summary>
		''' <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
		''' <param name="maxNumberOfItemsToReturn"> The maximum number of items to Return with this retrieval query.</param>
		''' <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		''' <param name="relations">The set of relations to walk to construct to total query.</param>
		''' <param name="pageNumber">The page number to retrieve.</param>
		''' <param name="pageSize">The page size of the page to retrieve.</param>
		''' <returns>DataTable with the rows requested.</returns>
		Public <[If IsSubType]>Shadows<[EndIf]> Shared Function GetMultiAsDataTable(selectFilter As IPredicate, maxNumberOfItemsToReturn As Long, sortClauses As ISortExpression, relations As IRelationCollection, pageNumber As Integer, pageSize As Integer) As DataTable
			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.GetMultiAsDataTable(maxNumberOfItemsToReturn, sortClauses, selectFilter, relations, pageNumber, pageSize)
		End Function

<[If IsInHierarchyType TargetPerEntity]>
		''' <summary>Deletes from the persistent storage all <[CurrentEntityName]> entities which match with the specified filter, formulated in
		''' the predicate or predicate expression definition.</summary>
		''' <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete. Can be null, which
		''' will result in a query removing all <[CurrentEntityName]> entities from the persistent storage</param>
		''' <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
		Public Overrides Overloads Function DeleteMulti(deleteFilter As IPredicate) As Integer
			Throw New NotSupportedException("This method isn't supported for this entity")
		End Function


		''' <summary>Deletes from the persistent storage all <[CurrentEntityName]> entities which match with the specified filter, formulated in
		''' the predicate or predicate expression definition.</summary>
		''' <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
		''' <param name="relations">The set of relations to walk to construct the total query.</param>
		''' <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
		Public Overrides Overloads Function DeleteMulti(deleteFilter As IPredicate, relations As IRelationCollection) As Integer
			Throw New NotSupportedException("This method isn't supported for this entity")
		End Function
<[EndIf]>

		''' <summary>Gets a scalar value, calculated with the aggregate. the field index specified is the field the aggregate are applied on.</summary>
		''' <param name="fieldIndex">Field index of field to which to apply the aggregate function and expression</param>
		''' <param name="aggregateToApply">Aggregate function to apply. </param>
		''' <Returns>the scalar value requested</Returns>
		Public Overloads Function GetScalar(fieldIndex As <[CurrentEntityName]>FieldIndex, aggregateToApply As AggregateFunction) As Object
			Return GetScalar(fieldIndex, Nothing, aggregateToApply, Nothing, Nothing, Nothing)
		End Function

		''' <summary>Gets a scalar value, calculated with the aggregate and expression specified. the field index specified is the field the expression and aggregate are applied on.</summary>
		''' <param name="fieldIndex">Field index of field to which to apply the aggregate function and expression</param>
		''' <param name="expressionToExecute">The expression to execute. Can be Nothing</param>
		''' <param name="aggregateToApply">Aggregate function to apply. </param>
		''' <Returns>the scalar value requested</Returns>
		Public Overloads Function GetScalar(fieldIndex As <[CurrentEntityName]>FieldIndex, expressionToExecute As IExpression, aggregateToApply As AggregateFunction) As Object
			Return GetScalar(fieldIndex, expressionToExecute, aggregateToApply, Nothing, Nothing, Nothing)
		End Function

		''' <summary>Gets a scalar value, calculated with the aggregate and expression specified. the field index specified is the field the expression and aggregate are applied on.</summary>
		''' <param name="fieldIndex">Field index of field to which to apply the aggregate function and expression</param>
		''' <param name="expressionToExecute">The expression to execute. Can be Nothing</param>
		''' <param name="aggregateToApply">Aggregate function to apply. </param>
		''' <param name="filter">The filter to apply to retrieve the scalar</param>
		''' <Returns>the scalar value requested</Returns>
		Public Overloads Function GetScalar(fieldIndex As <[CurrentEntityName]>FieldIndex, expressionToExecute As IExpression, aggregateToApply As AggregateFunction, Filter As IPredicate) As Object
			Return GetScalar(fieldIndex, expressionToExecute, aggregateToApply, Filter, Nothing, Nothing)
		End Function

		''' <summary>Gets a scalar value, calculated with the aggregate and expression specified. the field index specified is the field the expression and aggregate are applied on.</summary>
		''' <param name="fieldIndex">Field index of field to which to apply the aggregate function and expression</param>
		''' <param name="expressionToExecute">The expression to execute. Can be Nothing</param>
		''' <param name="aggregateToApply">Aggregate function to apply. </param>
		''' <param name="filter">The filter to apply to retrieve the scalar</param>
		''' <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
		''' <Returns>the scalar value requested</Returns>
		Public Overloads Function GetScalar(fieldIndex As <[CurrentEntityName]>FieldIndex, expressionToExecute As IExpression, aggregateToApply As AggregateFunction, Filter As IPredicate, groupByClause As IGroupByCollection) As Object
			Return GetScalar(fieldIndex, expressionToExecute, aggregateToApply, Filter, Nothing, groupByClause)
		End Function

		''' <summary>Gets a scalar value, calculated with the aggregate and expression specified. the field index specified is the field the expression and aggregate are applied on.</summary>
		''' <param name="fieldIndex">Field index of field to which to apply the aggregate function and expression</param>
		''' <param name="expressionToExecute">The expression to execute. Can be Nothing</param>
		''' <param name="aggregateToApply">Aggregate function to apply. </param>
		''' <param name="filter">The filter to apply to retrieve the scalar</param>
		''' <param name="relations">The relations to walk</param>
		''' <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
		''' <Returns>the scalar value requested</Returns>
		Public Overloads Overridable Function GetScalar(fieldIndex As <[CurrentEntityName]>FieldIndex, expressionToExecute As IExpression, aggregateToApply As AggregateFunction, Filter As IPredicate, relations As IRelationCollection, groupByClause As IGroupByCollection) As Object
			Dim fields As EntityFields = New EntityFields(1)
			fields(0) = EntityFieldFactory.Create(fieldIndex)
			If ((fields(0).ExpressionToApply Is Nothing) OrElse (Not expressionToExecute Is Nothing))
				fields(0).ExpressionToApply = expressionToExecute
			End If
			If ((fields(0).AggregateFunctionToApply = AggregateFunction.None) OrElse (aggregateToApply <> AggregateFunction.None))
				fields(0).AggregateFunctionToApply = aggregateToApply
			End If

			Dim dao As <[CurrentEntityName]>DAO = DAOFactory.Create<[CurrentEntityName]>DAO()
			Return dao.GetScalar(fields, MyBase.Transaction, Filter, relations, groupByClause)
		End Function
<[If Not IsSubType]>
		''' <summary>Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
		''' to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
		''' If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
		''' new Transaction (which is created in an inherited method.)</summary>
		''' <param name="recurse">If true, will recursively save the entities inside the collection</param>
		''' <returns>Amount of entities inserted</returns>
		''' <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
		Public Overloads Overrides Function SaveMulti(recurse As Boolean) As Integer
			Dim amountSaved As Integer = 0
			If Not Me.ParticipatesInTransaction Then
				Dim transactionManager As New Transaction(IsolationLevel.ReadCommitted, "SaveMulti")
				transactionManager.Add(Me)
				Try
					amountSaved = MyBase.SaveMulti(recurse)
					transactionManager.Commit()
				Catch
					transactionManager.Rollback()
					Throw
				End Try
			Else
				amountSaved = MyBase.SaveMulti(recurse)
			End If

			Return amountSaved
		End Function


		''' <summary>Deletes all Entities in the IEntityCollection from the persistent storage. If this IEntityCollection is added
		''' to a transaction, the delete processes will be done in that transaction, if the entity isn't already added to another transaction.
		''' If the entity is already in another transaction, it will use that transaction. If no transaction is present, the deletes are done in a
		''' new Transaction.
		''' Deleted entities are marked deleted and are removed from the collection.</summary>
		''' <returns>Amount of entities deleted</returns>
		Public Overrides Overloads Function DeleteMulti() As Integer
			Dim amountDeleted As Integer= 0
			If Not Me.ParticipatesInTransaction Then
				Dim transactionManager As New Transaction(IsolationLevel.ReadCommitted, "DeleteMulti")
				transactionManager.Add(Me)
				Try
					amountDeleted = MyBase.DeleteMulti()
					transactionManager.Commit()
				Catch
					transactionManager.Rollback()
					Throw
				End Try
			Else
				amountDeleted = MyBase.DeleteMulti()
			End If

			Return amountDeleted
		End Function
<[EndIf]>

		''' <summary>Creats a New DAO instance so code which Is In the base Class can still use the proper DAO Object.</summary>
		Protected Overrides Overloads Function CreateDAOInstance() As IDao
			Return DAOFactory.Create<[CurrentEntityName]>DAO()
		End Function
		
		''' <summary>Creates a New transaction Object</summary>
		''' <param name="levelOfIsolation">The level of isolation.</param>
		''' <param name="name">The name.</param>
		Protected Overrides Overloads Function CreateTransaction( levelOfIsolation As IsolationLevel, name As String) As ITransaction 
			Return New Transaction(levelOfIsolation, name)
		End Function
		
#Region "Class Property Declarations"
		''' <summary>Strong typed indexer. </summary>
		Default <[If IsSubType]>Shadows<[EndIf]> Public ReadOnly Property Item(index As Integer) As <[CurrentEntityName]>Entity
			Get 
				Return CType(List(index), <[CurrentEntityName]>Entity)
			End Get
		End Property
#End Region

#Region "Custom EntityCollection code"
		<[ UserCodeRegion "CustomEntityCollectionCode" ]>
		' __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCollectionCode
		' __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
#End Region

#Region "Included Code"
<# Custom_EntityCollectionTemplate #>
#End Region
	End Class
End Namespace
