'///////////////////////////////////////////////////////////////
' This is generated code. If you modify this code, be aware
' of the fact that when you re-generate the code, your changes
' are lost. If you want to keep your changes, make this file read-only
' when you have finished your changes, however it is recommended that
' you inherit from this class to extend the functionality of this generated
' class or you modify / extend the templates used to generate this code.
'//////////////////////////////////////////////////////////////
' Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' Code is generated on: <[Time]>
' Code is generated using templates: <[TemplateName]>
' Templates vendor: Solutions Design.
' Templates version: <[TemplateVersion]>
'///////////////////////////////////////////////////////////////
Imports System
Imports <[RootNamespace]>.FactoryClasses
<[ If HasEntity ]>Imports <[RootNamespace]>.RelationClasses<[ EndIf ]>
Imports SD.LLBLGen.Pro.ORMSupportClasses

<[ UserCodeRegion "AdditionalNamespaces" ]>
' __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
' __LLBLGENPRO_USER_CODE_REGION_END
<[ EndUserCodeRegion ]>
Namespace <[RootNamespace]>.HelperClasses
	''' <summary>
	''' Singleton implementation of the inheritanceInfoProvider. This class is the singleton wrapper through which the actual instance is retrieved.
	''' </summary>
	''' <remarks>It uses a single instance of an internal class. The access isn't marked with locks as the InheritanceInfoProviderBase class is threadsafe.</remarks>
	Public NotInheritable Class InheritanceInfoProviderSingleton
#Region "Class Member Declarations"
		Private Shared ReadOnly _providerInstance As IInheritanceInfoProvider = New InheritanceInfoProviderCore()
#End Region
		
		''' <summary>private ctor to prevent instances of this class.</summary>
		Private Sub New()
		End Sub

		''' <summary>Dummy static constructor to make sure threadsafe initialization is performed.</summary>
		Shared Sub New()
		End Sub

		''' <summary>Gets the singleton instance of the InheritanceInfoProviderCore</summary>
		''' <returns>Instance of the InheritanceInfoProvider.</returns>
		Public Shared Function GetInstance() As IInheritanceInfoProvider
			Return _providerInstance
		End Function
		
#Region "Custom InheritanceInfoProviderSingleton code"
		<[ UserCodeRegion "CustomInheritanceInfoProviderSingletonCode" ]>
		' __LLBLGENPRO_USER_CODE_REGION_START CustomInheritanceInfoProviderSingletonCode
		' __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
#End Region
	End Class


	''' <summary>Actual implementation of the InheritanceInfoProvider. Used by singleton wrapper.</summary>
	Friend Class InheritanceInfoProviderCore 
		Inherits InheritanceInfoProviderBase
		
		''' <summary>Initializes a new instance of the <see cref="InheritanceInfoProviderCore"/> class.</summary>
		Friend Sub New()
			Init()
		End Sub

		''' <summary>Method which initializes the internal datastores with the structure of hierarchical types.</summary>
		Private Sub Init()
<[ Foreach Entity]><[If Not IsInHierarchyType None]>
<[If IsInHierarchyType TargetPerEntity]>			MyBase.AddEntityInfo("<[CurrentEntityName]>Entity", <[If IsSubType]>"<[SuperTypeName]>Entity"<[Else]>String.Empty<[EndIf]>, New <[CurrentEntityName]>Relations(), New <[CurrentEntityName]>EntityFactory()<[If IsSubType]>, <[Foreach FieldToLink Comma]> (<[SubTypeFieldIndex]>-<[IndexFirstNonInheritedField]>)<[NextForeach]><[EndIf]>)<[Else]><[If IsInHierarchyType TargetPerEntityHierarchy]>			MyBase.AddEntityInfo("<[CurrentEntityName]>Entity", <[If IsSubType]>"<[SuperTypeName]>Entity"<[Else]>String.Empty<[EndIf]>, New <[CurrentEntityName]>EntityFactory(), CInt(<[CurrentEntityName]>FieldIndex.<[DiscriminatorColumnName]>), <[DiscriminatorValue]>)<[EndIf]><[EndIf]><[ EndIf ]><[ NextForeach ]>
			MyBase.BuildHierarchyInfoStore()
		End Sub

		''' <summary>Gets the entity fields for the entity passed in. Only the fields defined in the entity are returned</summary>
		''' <param name="entityName">Name of the entity to grab the fields for</param>
		''' <returns>array of IEntityFieldCore fields</returns>
		Public Overrides Function GetEntityFields(entityName As String) As IEntityFieldCore()
<[ If HasEntity ]>			Return EntityFieldsFactory.CreateFields(entityName)<[Else]>			Return Nothing<[ EndIf ]>
		End Function
	End Class
End Namespace




