' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // 
' // 
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Runtime.Serialization
Imports System.Collections
Imports <[RootNamespace]>.FactoryClasses
Imports SD.LLBLGen.Pro.ORMSupportClasses

Namespace <[RootNamespace]>.HelperClasses
	''' <summary>
	''' Helper class which will eases the creation of custom made resultsets. Usable in typed lists
	''' and dynamic lists created using the dynamic query engine.
	''' </summary>
	<Serializable()> _
	Public Class ResultsetFields 
		Inherits EntityFields
		Implements ISerializable
	
		''' <summary>CTor</summary>
		Public Sub New(amountFields As Integer)
			MyBase.New(amountFields, InheritanceInfoProviderSingleton.GetInstance(), Nothing)
		End Sub
				
		''' <summary>Deserialization constructor</summary>
		''' <param name="info">Info.</param>
		''' <param name="context">Context.</param>
		Protected Sub New(info As SerializationInfo, context As StreamingContext )
			MyBase.New(CInt(info.GetInt32("_amountFields")), InheritanceInfoProviderSingleton.GetInstance(), Nothing)
			Dim fields As ArrayList = CType(info.GetValue("_fields", GetType(ArrayList)), ArrayList)
			For i As Integer = 0 To fields.Count-1
				Me(i) = CType(fields(i), IEntityField)
			Next i
		End Sub

		''' <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> With the data needed To serialize the target Object.</summary>
		''' <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> To populate With data.</param>
		''' <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) For this serialization.</param>
		Public Sub GetObjectData(info As SerializationInfo, context As StreamingContext ) Implements ISerializable.GetObjectData
			info.AddValue("_amountFields", Me.Count)
			Dim fields As New ArrayList(Me.Count)
			For i As Integer = 0 To Me.Count-1
				fields.Add(Me(i))
			Next i
			info.AddValue("_fields", fields, GetType(ArrayList))
		End Sub
<[Foreach Entity]>
		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		''' <param name="fieldAlias">The alias to use for this field in the resultset</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentEntityName]>FieldIndex, indexInResultset As Integer, fieldAlias As String)
			DefineField(fieldToDefine, indexInResultset, fieldAlias, String.Empty, AggregateFunction.None)
		End Sub

		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		''' <param name="fieldAlias">The alias to use for this field in the resultset</param>
		''' <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentEntityName]>FieldIndex, indexInResultset As Integer, fieldAlias As String, entityAlias As String)
			DefineField(fieldToDefine, indexInResultset, fieldAlias, entityAlias, AggregateFunction.None)
		End Sub

		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		''' <param name="fieldAlias">The alias to use for this field in the resultset</param>
		''' <param name="entityAlias">The alias to use for the entity this field belongs to. Required to specify multiple times the same entity in a typed list</param>
		''' <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentEntityName]>FieldIndex, indexInResultset As Integer, fieldAlias As String, entityAlias As String, aggregateFunctionToApply As AggregateFunction)
			MyBase.DefineField(EntityFieldFactory.Create(fieldToDefine), indexInResultset, fieldAlias, entityAlias, aggregateFunctionToApply)
		End Sub<[NextForeach]>
<[Foreach TypedView]>
		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentTypedViewName]>FieldIndex, indexInResultset As Integer)
			DefineField(fieldToDefine, indexInResultset, String.Empty, AggregateFunction.None)
		End Sub

		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		''' <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentTypedViewName]>FieldIndex, indexInResultset As Integer, aggregateFunctionToApply As AggregateFunction)
			MyBase.DefineField(EntityFieldFactory.Create(fieldToDefine), indexInResultset, aggregateFunctionToApply)
		End Sub

		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		''' <param name="fieldAlias">The fieldAlias to use for this field in the resultset</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentTypedViewName]>FieldIndex, indexInResultset As Integer, fieldAlias As String)
			DefineField(fieldToDefine, indexInResultset, fieldAlias, AggregateFunction.None)
		End Sub

		''' <summary>Creates the specified field on the position indexInResultset in the resultset. </summary>
		''' <param name="fieldToDefine">The specification of the field to create.</param>
		''' <param name="indexInResultset">The position in the resultset where the field will be created on</param>
		''' <param name="fieldAlias">The fieldAlias to use for this field in the resultset</param>
		''' <param name="aggregateFunctionToApply">the aggregate function to apply to this field.</param>
		Public Overloads Sub DefineField(fieldToDefine As <[CurrentTypedViewName]>FieldIndex, indexInResultset As Integer, fieldAlias As String, aggregateFunctionToApply As AggregateFunction)
			MyBase.DefineField(EntityFieldFactory.Create(fieldToDefine), indexInResultset, fieldAlias, aggregateFunctionToApply)
		End Sub<[NextForeach]>

#Region "Included Code"
<# Custom_ResultsetFieldsTemplate #>
#End Region
	End Class
End Namespace
