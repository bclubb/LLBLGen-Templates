' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // Code is generated on: <[Time]>
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports <[RootNamespace]>
Imports <[RootNamespace]>.HelperClasses

Imports SD.LLBLGen.Pro.ORMSupportClasses

Namespace <[RootNamespace]>.FactoryClasses
	''' <summary>
	''' Generates IEntityFields instances for different kind of Entities. 
	''' This class is generated. Do not modify.
	''' </summary>
	Public Class EntityFieldsFactory

		''' <summary>
		''' Private CTor, no instantiation possible.
		''' </summary>
		Private Sub New()
		End Sub
<[If HasEntity]>
		''' <summary>General factory entrance method which will Return an EntityFields Object with the format generated by the factory specified</summary>
		''' <param name="relatedEntityType">The type of entity the fields are for</param>
		''' <returns>The IEntityFields instance requested</returns>
		Public Shared Function CreateEntityFieldsObject(relatedEntityType As <[RootNamespace]>.EntityType) As IEntityFields
			Dim fieldsToReturn As IEntityFields = Nothing
			Dim inheritanceProvider As IInheritanceInfoProvider = InheritanceInfoProviderSingleton.GetInstance()
			Dim fieldProvider As IFieldInfoProvider = FieldInfoProviderSingleton.GetInstance()
			Dim persistenceProvider As IPersistenceInfoProvider = PersistenceInfoProviderSingleton.GetInstance()
			Select Case relatedEntityType
<[Foreach Entity CrLf]>				Case <[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity
					fieldsToReturn = fieldProvider.GetEntityFields(inheritanceProvider, persistenceProvider, "<[CurrentEntityName]>Entity")<[NextForeach]>
			End Select
			Return fieldsToReturn
		End Function
		
		''' <summary>General method which will Return an array of IEntityFieldCore objects, used by the InheritanceInfoProvider. Only the fields defined In the entity are returned, no inherited fields.</summary>
		''' <param name="entityName">the name of the entity To Get the fields For. Example: "CustomerEntity"</param>
		''' <returns>array of IEntityFieldCore fields, defined In the entity With the name specified</returns>
		Friend Shared Function CreateFields(entityName As String) As IEntityFieldCore()
			Dim toReturn As IEntityFieldCore() = Nothing
			Dim fieldProvider As IFieldInfoProvider = FieldInfoProviderSingleton.GetInstance()
			Dim persistenceProvider As IPersistenceInfoProvider = PersistenceInfoProviderSingleton.GetInstance()
			Select Case entityName
<[Foreach Entity CrLf]><[If Not IsInHierarchyType None]>				Case "<[CurrentEntityName]>Entity"
					toReturn = fieldProvider.GetEntityFieldsArray("<[CurrentEntityName]>Entity", persistenceProvider)<[EndIf]><[NextForeach]>
				Case Else
					toReturn = Nothing
			End Select
			Return toReturn
		End Function<[EndIf]>

<[If HasTypedView]>
		''' <summary>General factory entrance method which will Return a TypedView EntityFields Object with the format generated by the factory specified</summary>
		''' <param name="relatedTypedViewType">The type of typed view the fields are for</param>
		''' <returns>The IEntityFields instance requested</returns>
		Public Shared Function CreateTypedViewEntityFieldsObject(relatedTypedViewType As TypedViewType) As IEntityFields
			Dim fieldsToReturn As IEntityFields = Nothing
			Select Case relatedTypedViewType
				<[Foreach TypedView CrLf]>
				Case TypedViewType.<[CurrentTypedViewName]>TypedView
					fieldsToReturn = Create<[CurrentTypedViewName]>TypedViewEntityFields()<[NextForeach]>
			End Select
			Return fieldsToReturn
		End Function<[EndIf]>
<[Foreach TypedView CrLf]>
		''' <summary>Creates a complete EntityFields instance for the <[CurrentTypedViewName]>Entity.</summary>
		''' <returns></returns>
		Private Shared Function Create<[CurrentTypedViewName]>TypedViewEntityFields() As IEntityFields
			Dim fieldsToReturn As IEntityFields = New EntityFields(CInt(<[CurrentTypedViewName]>FieldIndex.AmountOfFields), Nothing, FieldInfoProviderSingleton.GetInstance().GetFieldIndexes("<[CurrentEntityName]>TypedView"))
			Dim i As Integer
			For i=0 To CInt(<[CurrentTypedViewName]>FieldIndex.AmountOfFields)-1
				fieldsToReturn(i) = EntityFieldFactory.Create(CType(i, <[CurrentTypedViewName]>FieldIndex))
			Next
			Return fieldsToReturn
		End Function<[NextForeach]>

#Region "Included Code"
<# Custom_EntityFieldsFactoryTemplate #>
#End Region
	End Class
End Namespace
