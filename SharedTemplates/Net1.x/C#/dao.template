///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// 
// 
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.Common;
using System.Collections;

using <[RootNamespace]>.EntityClasses;
using <[RootNamespace]>.FactoryClasses;
using <[RootNamespace]>.CollectionClasses;
using <[RootNamespace]>.HelperClasses;
using <[RootNamespace]>;

using SD.LLBLGen.Pro.ORMSupportClasses;
<# SD_DAOIncludeTemplate #>

namespace <[RootNamespace]>.DaoClasses
{
	<[ UserCodeRegion "AdditionalNamespaces" ]>
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	<[ EndUserCodeRegion ]>

	/// <summary>
	/// General DAO class for the <[CurrentEntityName]> Entity. It will perform database oriented actions for
	/// a entity of type '<[CurrentEntityName]>Entity'. This DAO works on an EntityFields object. 
	/// </summary>
	public <[If UsePartialClasses]>partial <[EndIf]>class <[CurrentEntityName]>DAO : <[If IsSubType]><[SuperTypeName]>DAO<[Else]>DaoBase<[EndIf]>
	{
		/// <summary>CTor</summary>
		public <[CurrentEntityName]>DAO() : base(InheritanceInfoProviderSingleton.GetInstance(), new DynamicQueryEngine(), InheritanceHierarchyType.<[If IsInHierarchyType TargetPerEntity]>TargetPerEntity<[Else]><[If IsInHierarchyType TargetPerEntityHierarchy]>TargetPerEntityHierarchy<[Else]>None<[EndIf]><[EndIf]>, "<[CurrentEntityName]>Entity", new <[CurrentEntityName]>EntityFactory())
		{
		}
		
		/// <summary>CTor</summary>
		/// <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
		/// <param name="dqeToUse">Dqe to use.</param>
		/// <param name="typeOfInheritance">Type of inheritance.</param>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="entityFactory">Entity factory.</param>
		internal <[CurrentEntityName]>DAO(IInheritanceInfoProvider inheritanceInfoProviderToUse, DynamicQueryEngineBase dqeToUse, InheritanceHierarchyType typeOfInheritance, string entityName, IEntityFactory entityFactory) : base(inheritanceInfoProviderToUse, dqeToUse, typeOfInheritance, entityName, entityFactory)
		{
		}
<[Foreach UniqueConstraint]>
		/// <summary>
		/// Reads an entity based on a unique constraint. Which entity is read is determined from the passed in fields for the UniqueConstraint.
		/// </summary>
		/// <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
<[Foreach UniqueConstraintEntityField CrLf]>		/// <param name="<[CaseCamel EntityFieldName]>">Value for a field in the UniqueConstraint, which is used to retrieve the contents.</param><[NextForeach]>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
		/// <param name="contextToUse">The context to fetch the prefetch path with.</param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		public void Fetch<[CurrentEntityName]>UsingUC<[Foreach UniqueConstraintEntityField]><[EntityFieldName]><[NextForeach]>(IEntity entityToFetch, ITransaction containingTransaction, <[Foreach UniqueConstraintEntityField Comma]><[TypeOfField]> <[CaseCamel EntityFieldName]><[NextForeach]>, IPrefetchPath prefetchPathToUse, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			IPredicateExpression selectFilter = new PredicateExpression();
<[Foreach UniqueConstraintEntityField CrLf]>			selectFilter.Add(new FieldCompareValuePredicate(entityToFetch.Fields[(int)<[CurrentEntityName]>FieldIndex.<[EntityFieldName]>], ComparisonOperator.Equal, <[CaseCamel EntityFieldName]>));<[NextForeach]> 
			PerformFetchEntityAction(entityToFetch, containingTransaction, selectFilter, prefetchPathToUse, contextToUse, excludedIncludedFields);
		}
<[If Not IsInHierarchyType None]>		
		/// <summary>
		/// Reads the entity's data into EntityFields object and returns that object. Which entity is read is determined from the passed in fields for the UniqueConstraint.
		/// </summary>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
<[Foreach UniqueConstraintEntityField CrLf]>		/// <param name="<[CaseCamel EntityFieldName]>">Value for a field in the UniqueConstraint, which is used to retrieve the contents.</param><[NextForeach]>
		/// <param name="contextToUse">The context to fetch the prefetch path with.</param>
		/// <param name="excludedIncludedFields">The list of IEntityField objects which have to be excluded or included for the fetch. 
		/// If null or empty, all fields are fetched (default). If an instance of ExcludeIncludeFieldsList is passed in and its ExcludeContainedFields property
		/// is set to false, the fields contained in excludedIncludedFields are kept in the query, the rest of the fields in the query are excluded.</param>
		/// <returns>Entity instance which is represented by the passed in UC</returns>
		internal <[CurrentEntityName]>Entity Fetch<[CurrentEntityName]>PolyUsingUC<[Foreach UniqueConstraintEntityField]><[EntityFieldName]><[NextForeach]>(ITransaction containingTransaction, <[Foreach UniqueConstraintEntityField Comma]><[TypeOfField]> <[CaseCamel EntityFieldName]><[NextForeach]>, Context contextToUse, ExcludeIncludeFieldsList excludedIncludedFields)
		{
			IPredicateExpression selectFilter = new PredicateExpression();
<[Foreach UniqueConstraintEntityField CrLf]>			selectFilter.Add(new FieldCompareValuePredicate(<[CurrentEntityName]>Fields.<[EntityFieldName]>, ComparisonOperator.Equal, <[CaseCamel EntityFieldName]>));<[NextForeach]> 
			return (<[CurrentEntityName]>Entity)PerformPolymorphicEntityFetch(containingTransaction, selectFilter, contextToUse, excludedIncludedFields);
		}<[EndIf]>
<[NextForeach]>
<[If HasRelation ManyToOne]>
		/// <summary>
		/// Retrieves in the calling <[CurrentEntityName]>Collection object all <[CurrentEntityName]>Entity objects which have data in common
		/// with the specified related Entities. If one is omitted, that entity is not used as a filter. 
		/// </summary>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
		/// <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
		/// If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
		/// When set to 0, no limitations are specified.</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		/// <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
		/// <param name="filter">Extra filter to limit the resultset. Predicate expression can be null, in which case it will be ignored.</param>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		/// <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to return</param><[NextForeach]>
		/// <param name="pageNumber">The page number to retrieve.</param>
		/// <param name="pageSize">The page size of the page to retrieve.</param>
		public bool GetMulti(ITransaction containingTransaction, IEntityCollection collectionToFill, long maxNumberOfItemsToReturn, ISortExpression sortClauses, IEntityFactory entityFactoryToUse, IPredicateExpression filter, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]>IEntity <[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, int pageNumber, int pageSize)
		{
			base.EntityFactoryToUse = entityFactoryToUse;
			IEntityFields fieldsToReturn = EntityFieldsFactory.CreateEntityFieldsObject(<[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity);
			IPredicateExpression selectFilter = CreateFilterUsingForeignKeys(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, fieldsToReturn);
			if(filter!=null)
			{
				selectFilter.AddWithAnd(filter);
			}
			return PerformGetMultiAction(containingTransaction, collectionToFill, maxNumberOfItemsToReturn, sortClauses, selectFilter, null, null, null, pageNumber, pageSize);
		}
<[EndIf]>
		/// <summary>
		/// Retrieves entities of the type '<[CurrentEntityName]>Entity' in a datatable which match the specified filter. 
		/// It will always create a new connection to the database.
		/// </summary>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
		/// If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
		/// When set to 0, no limitations are specified.</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		/// <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
		/// <param name="relations">The set of relations to walk to construct to total query.</param>
		/// <param name="pageNumber">The page number to retrieve.</param>
		/// <param name="pageSize">The page size of the page to retrieve.</param>
		/// <returns>a filled datatable if succeeded, false otherwise</returns>
		public <[If IsSubType]>override<[Else]>virtual<[EndIf]> DataTable GetMultiAsDataTable(long maxNumberOfItemsToReturn, ISortExpression sortClauses, IPredicate selectFilter, IRelationCollection relations, int pageNumber, int pageSize)
		{
			return base.PerformGetMultiAsDataTableAction(maxNumberOfItemsToReturn, sortClauses, selectFilter, relations, pageNumber, pageSize);
		}
<[If HasRelation ManyToMany]>
	<[Foreach RelatedEntity ManyToMany]><[If Not MappedFieldRelationIsHidden]>
		/// <summary>
		/// Retrieves in the calling <[CurrentEntityName]>Collection object all <[CurrentEntityName]>Entity objects
		/// which are related via a relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		/// </summary>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
		/// <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
		/// If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. When set to 0, no limitations are specified.</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		/// <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
		/// <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity object to be used as a filter in the m:n relation</param>
		/// <param name="pageNumber">The page number to retrieve.</param>
		/// <param name="pageSize">The page size of the page to retrieve.</param>
		/// <returns>true if succeeded, false otherwise</returns>
		public bool GetMultiUsing<[MappedFieldNameRelation]>(ITransaction containingTransaction, IEntityCollection collectionToFill, long maxNumberOfItemsToReturn, ISortExpression sortClauses, IEntityFactory entityFactoryToUse, IEntity <[CaseCamel RelatedEntityName]>Instance, int pageNumber, int pageSize)
		{
			IEntityFields fieldsToReturn = EntityFieldsFactory.CreateEntityFieldsObject(<[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity);
			RelationCollection relations = new RelationCollection();
			relations.Add(<[CurrentEntityName]>Entity.Relations.<[IntermediateEntityName]>EntityUsing<[Foreach RelationField OneToMany]><[RelatedEntityRelationFieldName]><[NextForeach]>, "<[IntermediateEntityName]>_");
			relations.Add(<[IntermediateEntityName]>Entity.Relations.<[RelatedEntityName]>EntityUsing<[Foreach RelationField ManyToOne]><[RelationFieldName]><[NextForeach]>, "<[IntermediateEntityName]>_", string.Empty, JoinHint.None);
			IPredicateExpression selectFilter = new PredicateExpression();
			<[Foreach RelatedEntityPrimaryKeyField CrLf]>selectFilter.Add(new FieldCompareValuePredicate(<[CaseCamel RelatedEntityName]>Instance.Fields[(int)<[RelatedEntityName]>FieldIndex.<[RelatedEntityPrimaryKeyFieldName]>], ComparisonOperator.Equal));<[NextForeach]>
			return GetMulti(containingTransaction, collectionToFill, maxNumberOfItemsToReturn, sortClauses, entityFactoryToUse, selectFilter, relations, pageNumber, pageSize);
		}

		/// <summary>
		/// Retrieves in the calling <[CurrentEntityName]>Collection object all <[CurrentEntityName]>Entity objects
		/// which are related via a relation of type 'm:n' with the passed in <[RelatedEntityName]>Entity. 
		/// </summary>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
		/// <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
		/// <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
		/// If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. When set to 0, no limitations are specified.</param>
		/// <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
		/// <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
		/// <param name="<[CaseCamel RelatedEntityName]>Instance"><[RelatedEntityName]>Entity object to be used as a filter in the m:n relation</param>
		/// <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
		/// <returns>true if succeeded, false otherwise</returns>
		public bool GetMultiUsing<[MappedFieldNameRelation]>(ITransaction containingTransaction, IEntityCollection collectionToFill, long maxNumberOfItemsToReturn, ISortExpression sortClauses, IEntityFactory entityFactoryToUse, IEntity <[CaseCamel RelatedEntityName]>Instance, IPrefetchPath prefetchPathToUse)
		{
			IEntityFields fieldsToReturn = EntityFieldsFactory.CreateEntityFieldsObject(<[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity);
			RelationCollection relations = new RelationCollection();
			relations.Add(<[CurrentEntityName]>Entity.Relations.<[IntermediateEntityName]>EntityUsing<[Foreach RelationField OneToMany]><[RelatedEntityRelationFieldName]><[NextForeach]>, "<[IntermediateEntityName]>_");
			relations.Add(<[IntermediateEntityName]>Entity.Relations.<[RelatedEntityName]>EntityUsing<[Foreach RelationField ManyToOne]><[RelationFieldName]><[NextForeach]>, "<[IntermediateEntityName]>_", string.Empty, JoinHint.None);
			IPredicateExpression selectFilter = new PredicateExpression();
			<[Foreach RelatedEntityPrimaryKeyField CrLf]>selectFilter.Add(new FieldCompareValuePredicate(<[CaseCamel RelatedEntityName]>Instance.Fields[(int)<[RelatedEntityName]>FieldIndex.<[RelatedEntityPrimaryKeyFieldName]>], ComparisonOperator.Equal));<[NextForeach]>
			return GetMulti(containingTransaction, collectionToFill, maxNumberOfItemsToReturn, sortClauses, entityFactoryToUse, selectFilter, relations, prefetchPathToUse);
		}
<[EndIf]><[NextForeach]><[EndIf]>
	<[If HasRelation ManyToOne]>
		/// <summary>
		/// Deletes from the persistent storage all '<[CurrentEntityName]>' entities which have data in common
		/// with the specified related Entities. If one is omitted, that entity is not used as a filter. 
		/// </summary>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		/// <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to delete</param><[NextForeach]>
		/// <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
		public int DeleteMulti(ITransaction containingTransaction, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]>IEntity <[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>)
		{
			IEntityFields fields = EntityFieldsFactory.CreateEntityFieldsObject(<[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity);
			IPredicateExpression deleteFilter = CreateFilterUsingForeignKeys(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, fields);
			return base.DeleteMulti(containingTransaction, deleteFilter);
		}

		/// <summary>
		/// Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
		/// supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
		/// of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated. 
		/// </summary>
		/// <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only changed fields are taken into account</param>
		/// <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		/// <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects to update</param><[NextForeach]>
		/// <returns>Amount of entities affected, if the used persistent storage has rowcounting enabled.</returns>
		public int UpdateMulti(IEntity entityWithNewValues, ITransaction containingTransaction, <[Foreach RelatedEntity ManyToOne IncludeInherited Comma]>IEntity <[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>)
		{
			IEntityFields fields = EntityFieldsFactory.CreateEntityFieldsObject(<[RootNamespace]>.EntityType.<[CurrentEntityName]>Entity);
			IPredicateExpression updateFilter = CreateFilterUsingForeignKeys(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]><[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, fields);
			return base.UpdateMulti(entityWithNewValues, containingTransaction, updateFilter);
		}
	<[EndIf]>
<[If Not IsSubType]>
		/// <summary>
		/// Determines the connection to use. If transaction to use is null, a new connection is created, otherwise the connection of the transaction is used.
		/// </summary>
		/// <param name="transactionToUse">Transaction to use.</param>
		/// <returns>a ready to use connection object.</returns>
		protected override IDbConnection DetermineConnectionToUse(ITransaction transactionToUse)
		{
			return DbUtils.DetermineConnectionToUse(transactionToUse);
		}
		
		/// <summary>
		/// Creates a new ADO.NET data adapter.
		/// </summary>
		/// <returns>ready to use ADO.NET data-adapter</returns>
		protected override DbDataAdapter CreateDataAdapter()
		{
			return DbUtils.CreateDataAdapter();
		}
<[EndIf]>
<[If HasRelation ManyToOne]>
		/// <summary>
		/// Creates a PredicateExpression which should be used as a filter when any combination of available foreign keys is specified.
		/// </summary>
<[Foreach RelatedEntity ManyToOne IncludeInherited CrLf]>		/// <param name="<[CaseCamel MappedFieldNameRelation]>Instance"><[RelatedEntityName]>Entity instance to use as a filter for the <[CurrentEntityName]>Entity objects</param><[NextForeach]>
		/// <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the fieldset of the target entity.</param>
		/// <returns>A ready to use PredicateExpression based on the passed in foreign key value holders.</returns>
		private IPredicateExpression CreateFilterUsingForeignKeys(<[Foreach RelatedEntity ManyToOne IncludeInherited Comma]>IEntity <[CaseCamel MappedFieldNameRelation]>Instance<[NextForeach]>, IEntityFields fieldsToReturn)
		{
			IPredicateExpression selectFilter = new PredicateExpression();
			<[Foreach RelatedEntity ManyToOne IncludeInherited]>
			if(<[CaseCamel MappedFieldNameRelation]>Instance != null)
			{
				<[Foreach RelationField CrLf]>selectFilter.Add(new FieldCompareValuePredicate(fieldsToReturn[(int)<[CurrentEntityName]>FieldIndex.<[RelationFieldName]>], ComparisonOperator.Equal, ((<[ RelatedEntityName ]>Entity)<[CaseCamel MappedFieldNameRelation]>Instance).<[RelatedEntityRelationFieldName]>));<[NextForeach]>
			}<[NextForeach]>
			return selectFilter;
		}
<[EndIf]>
		#region Custom DAO code
		<[ UserCodeRegion "CustomDAOCode" ]>
		// __LLBLGENPRO_USER_CODE_REGION_START CustomDAOCode
		// __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
		#endregion
		
		#region Included Code
<# Custom_EntityDAOTemplate #>
		#endregion
	}
}
