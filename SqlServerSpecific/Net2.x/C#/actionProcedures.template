///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// Code is generated on: <[Time]>
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Data.SqlClient;

using <[RootNamespace]>.HelperClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.StoredProcedureCallerClasses
{
	/// <summary>
	/// Class which contains the static logic to execute action stored procedures in the database.
	/// </summary>
	public <[If UsePartialClasses]>partial <[EndIf]>class ActionProcedures
	{
		/// <summary>
		/// private CTor so no instance can be created.
		/// </summary>
		private ActionProcedures()
		{
		}

	<[Foreach ActionStoredProcedureCall CrLf]>
		/// <summary>
		/// Delegate definition for stored procedure '<[ActualStoredProcedureName]>' to be used in combination of a UnitOfWork object.
		/// </summary>
		public delegate int <[CurrentSPCallName]>CallBack(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]> ITransaction transactionToUse);

		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		/// <[Foreach CustomProperty ActionStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		public static int <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			// create parameters
			SqlParameter[] parameters = new SqlParameter[<[AmountOfParameters]>];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.InputOutput, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// Call the stored proc.
			int toReturn = DbUtils.CallActionStoredProcedure("[<[SourceCatalogName]>].[<[SourceSchemaName]>].[<[ActualStoredProcedureName]>]", parameters, null);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>
			return toReturn;
		}
		
		
		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		/// <[Foreach CustomProperty ActionStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <param name="returnValue">Return value of the stored procedure</param>
		/// <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		public static int <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]>ref System.Int32 returnValue)
		{
			// create parameters. Add 1 to make room for the return value parameter.
			SqlParameter[] parameters = new SqlParameter[<[AmountOfParameters]> + 1];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.InputOutput, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// return value parameter
			parameters[<[AmountOfParameters]>] = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, true, 10, 0, "",  DataRowVersion.Current, returnValue);

			// Call the stored proc.
			int toReturn = DbUtils.CallActionStoredProcedure("[<[SourceCatalogName]>].[<[SourceSchemaName]>].[<[ActualStoredProcedureName]>]", parameters, null);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>
			returnValue = (int)parameters[<[AmountOfParameters]>].Value;
			return toReturn;
		}


		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		/// <[Foreach CustomProperty ActionStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		/// <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		public static int <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]> ITransaction transactionToUse)
		{
			// create parameters
			SqlParameter[] parameters = new SqlParameter[<[AmountOfParameters]>];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.InputOutput, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// Call the stored proc.
			int toReturn = DbUtils.CallActionStoredProcedure("[<[SourceCatalogName]>].[<[SourceSchemaName]>].[<[ActualStoredProcedureName]>]", parameters, transactionToUse);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>
			return toReturn;
		}
		
		
		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		/// <[Foreach CustomProperty ActionStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <param name="returnValue">Return value of the stored procedure</param>
		/// <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		/// <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		public static int <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]>ref System.Int32 returnValue, ITransaction transactionToUse)
		{
			// create parameters. Add 1 to make room for the return value parameter.
			SqlParameter[] parameters = new SqlParameter[<[AmountOfParameters]> + 1];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = new SqlParameter("<[ActualParameterName]>", SqlDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.InputOutput, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// return value parameter
			parameters[<[AmountOfParameters]>] = new SqlParameter("RETURNVALUE", SqlDbType.Int, 0, ParameterDirection.ReturnValue, true, 10, 0, "",  DataRowVersion.Current, returnValue);

			// Call the stored proc.
			int toReturn = DbUtils.CallActionStoredProcedure("[<[SourceCatalogName]>].[<[SourceSchemaName]>].[<[ActualStoredProcedureName]>]", parameters, transactionToUse);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>Nullable<<[TypeOfParameter]>><[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>
			returnValue = (int)parameters[<[AmountOfParameters]>].Value;
			return toReturn;
		}
	<[NextForeach]>
	
		#region Included Code
<# Custom_ActionProceduresTemplate #>
		#endregion
	}
}
