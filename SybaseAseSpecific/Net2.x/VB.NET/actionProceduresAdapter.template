' ///////////////////////////////////////////////////////////////
' // This is generated code. 
' //////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // 
' // 
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' //////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports Sybase.Data.AseClient

Namespace <[RootNamespace]><[DbSpecificNamespaceSuffix]>

	''' <summary>
	''' Class which contains the Shared logic to execute action stored procedures in the database.
	''' </summary>
	Public Class ActionProcedures
		''' <summary>
		''' private CTor so no instance can be created.
		''' </summary>
		Private Sub New()
		End Sub

	<[Foreach ActionStoredProcedureCall CrLf]>
		''' <summary>
		''' Delegate definition for stored procedure '<[ActualStoredProcedureName]>' to be used in combination of a UnitOfWork2 object.
		''' </summary>
		Delegate Function <[CurrentSPCallName]>CallBack(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>adapter As DataAccessAdapter) As Integer

		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty ActionStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]>) As Integer
			Dim adapter As New DataAccessAdapter()
			Try
				Return <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]> adapter)
			Finally
				adapter.Dispose()
			End Try
		End Function


		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty ActionStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="adapter">The DataAccessAdapter object to use for the call</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>adapter As DataAccessAdapter) As Integer
			Dim parameters() As AseParameter = New AseParameter(<[AmountOfParameters]> - 1) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			Dim toReturn As Integer = adapter.CallActionStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>
			Return toReturn
		End Function
		

		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty ActionStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>ByRef returnValue As System.Int32) As Integer
			Dim adapter As New DataAccessAdapter()
			Try
				Return <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]><[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]>returnValue, adapter)
			Finally
				adapter.Dispose()
			End Try
		End Function

		
		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty ActionStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="adapter">The DataAccessAdapter object to use for the call</param>
		''' <returns>Amount of rows affected, if the database / routine doesn't surpress rowcounting.</returns>
		Public Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>ByRef returnValue As System.Int32, adapter As DataAccessAdapter) As Integer
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As AseParameter = New AseParameter(<[AmountOfParameters]>) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			parameters(<[AmountOfParameters]>) = New AseParameter("RETURNVALUE", AseDbType.Integer, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)
			Dim toReturn As Integer = adapter.CallActionStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Nullable(Of <[TypeOfParameter]>)<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>
			returnValue = CType(parameters(<[AmountOfParameters]>).Value, Integer)
			return toReturn
		End Function
	<[NextForeach]>


#Region "Included Code"
<# Custom_ActionProceduresAdapterTemplate #>
#End Region
	End Class
End Namespace
