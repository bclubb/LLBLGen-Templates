///////////////////////////////////////////////////////////////
// This is generated code. 
//////////////////////////////////////////////////////////////
// Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
// 
// 
// Code is generated using templates: <[TemplateName]>
// Templates vendor: Solutions Design.
// Templates version: <[TemplateVersion]>
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using Sybase.Data.AseClient;

using <[RootNamespace]>.HelperClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace <[RootNamespace]>.StoredProcedureCallerClasses
{
	/// <summary>
	/// Class which contains the static logic to execute retrieval stored procedures in the database.
	/// </summary>
	public <[If UsePartialClasses]>partial <[EndIf]>class RetrievalProcedures
	{
		/// <summary>
		/// private CTor so no instance can be created.
		/// </summary>
		private RetrievalProcedures()
		{
		}

	<[Foreach RetrievalStoredProcedureCall CrLf]>
		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		/// <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <returns>Filled <[ProcedureOutputType]> with resultset(s) of stored procedure</returns>
		public static <[ProcedureOutputType]> <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			// create parameters
			AseParameter[] parameters = new AseParameter[<[AmountOfParameters]>];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// Call the stored proc.
			<[ProcedureOutputType]> toReturn = new <[ProcedureOutputType]>("<[CurrentSPCallName]>");
			bool hasSucceeded = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, null);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>
			return toReturn;
		}

	
		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'. This version also returns the return value of the stored procedure.<br/><br/>
		/// <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <param name="returnValue">Return value of the stored procedure</param>
		/// <returns>Filled <[ProcedureOutputType]> with resultset(s) of stored procedure</returns>
		public static <[ProcedureOutputType]> <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]>ref System.Int32 returnValue)
		{
			// create parameters. Add 1 to make room for the return value parameter.
			AseParameter[] parameters = new AseParameter[<[AmountOfParameters]> + 1];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// return value parameter
			parameters[<[AmountOfParameters]>] = new AseParameter("RETURNVALUE", AseDbType.Integer, 0, ParameterDirection.ReturnValue, true, 10, 0, "",  DataRowVersion.Current, returnValue);
			
			// Call the stored proc.
			<[ProcedureOutputType]> toReturn = new <[ProcedureOutputType]>("<[CurrentSPCallName]>");
			bool hasSucceeded = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, null);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>

			returnValue = (int)parameters[<[AmountOfParameters]>].Value;
			return toReturn;
		}


		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		/// <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		/// <returns>Filled <[ProcedureOutputType]> with resultset(s) of stored procedure</returns>
		public static <[ProcedureOutputType]> <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]> ITransaction transactionToUse)
		{
			// create parameters
			AseParameter[] parameters = new AseParameter[<[AmountOfParameters]>];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// Call the stored proc.
			<[ProcedureOutputType]> toReturn = new <[ProcedureOutputType]>("<[CurrentSPCallName]>");
			bool hasSucceeded = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, transactionToUse);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>
			return toReturn;
		}

	
		/// <summary>
		/// Calls stored procedure '<[ActualStoredProcedureName]>'. This version also returns the return value of the stored procedure.<br/><br/>
		/// <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <param name="returnValue">Return value of the stored procedure</param>
		/// <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		/// <returns>Filled <[ProcedureOutputType]> with resultset(s) of stored procedure</returns>
		public static <[ProcedureOutputType]> <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ref <[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]><[If HasParameter]>, <[EndIf]>ref System.Int32 returnValue, ITransaction transactionToUse)
		{
			// create parameters. Add 1 to make room for the return value parameter.
			AseParameter[] parameters = new AseParameter[<[AmountOfParameters]> + 1];
<[Foreach InputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters[<[ParameterIndex]>] = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>);<[NextForeach]>
			// return value parameter
			parameters[<[AmountOfParameters]>] = new AseParameter("RETURNVALUE", AseDbType.Integer, 0, ParameterDirection.ReturnValue, true, 10, 0, "",  DataRowVersion.Current, returnValue);
			
			// Call the stored proc.
			<[ProcedureOutputType]> toReturn = new <[ProcedureOutputType]>("<[CurrentSPCallName]>");
			bool hasSucceeded = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, transactionToUse);
<[Foreach OutputParameter CrLf]>			if(parameters[<[ParameterIndex]>].Value!=System.DBNull.Value)
			{
				<[CaseCamel CurrentParameterName]> = (<[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)parameters[<[ParameterIndex]>].Value;
			}<[NextForeach]>

			returnValue = (int)parameters[<[AmountOfParameters]>].Value;
			return toReturn;
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure '<[ActualStoredProcedureName]>'.
		/// <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		/// <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		/// </summary>
<[If HasParameter InputParameter]><[Foreach InputParameter CrLf]>		/// <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery Get<[CurrentSPCallName]>CallAsQuery( <[Foreach InputParameter Comma]><[If IsNullable]><[If IsValueType]>object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]> <[CaseCamel CurrentParameterName]><[NextForeach]>)
		{
			string procName = SD.LLBLGen.Pro.DQE.SybaseAse.DynamicQueryEngine.GetNewStoredProcedureName("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>");
			RetrievalQuery toReturn = new RetrievalQuery( new AseCommand(procName) );
<[Foreach InputParameter CrLf]>			toReturn.Parameters.Add(RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>));<[NextForeach]>
<[Foreach OutputParameter CrLf]>			toReturn.Parameters.Add(RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, true, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, null));<[NextForeach]>
			toReturn.Command.CommandType = CommandType.StoredProcedure;
			return toReturn;
		}
	<[NextForeach]>
	
		/// <summary>Creates a new AseParameter.</summary>
		/// <param name="parameterName">Name of the parameter.</param>
		/// <param name="parameterType">Type of the parameter.</param>
		/// <param name="size">The size.</param>
		/// <param name="direction">The direction.</param>
		/// <param name="isNullable">if set to true, the parameter is nullable</param>
		/// <param name="precision">The precision.</param>
		/// <param name="scale">The scale.</param>
		/// <param name="sourceColumn">The source column.</param>
		/// <param name="rowVersion">The row version.</param>
		/// <param name="value">The value.</param>
		/// <returns>new, usable parameter</returns>
		/// <remarks>Required as Sybase ASE's ado.net provider is buggy, it can't create a proper parameter with the full ctor if the value is a numeric type</remarks>
		internal static AseParameter CreateAseParameter(string parameterName, AseDbType parameterType, int size, ParameterDirection direction, bool isNullable,
								byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, object value)
		{
			AseParameter toReturn = null;
			switch(parameterType)
			{
				case AseDbType.Numeric:
				case AseDbType.Decimal:
				case AseDbType.Double:
				case AseDbType.Real:
				case AseDbType.Money:
				case AseDbType.SmallMoney:
					toReturn = new AseParameter(parameterName, parameterType);
					toReturn.IsNullable = isNullable;
					toReturn.Direction = direction;
					toReturn.SourceVersion = rowVersion;
					toReturn.Value = value;
					break;
				default:
					toReturn = new AseParameter(parameterName, parameterType, size, direction, isNullable, precision, scale, sourceColumn, rowVersion, value);
					break;
			}
			return toReturn;
		}

		#region Included Code
<# Custom_RetrievalProceduresTemplate #>
		#endregion
	}
}
