' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // Code is generated on: <[Time]>
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports Sybase.Data.AseClient

Imports SD.LLBLGen.Pro.ORMSupportClasses

Imports <[RootNamespace]>.HelperClasses

Namespace <[RootNamespace]>.StoredProcedureCallerClasses
	''' <summary>
	''' Class which contains the static logic to execute retrieval stored procedures in the database.
	''' </summary>
	Public Class RetrievalProcedures
		''' <summary>
		''' private CTor so no instance can be created.
		''' </summary>
		Private Sub New()
		End Sub

	<[Foreach RetrievalStoredProcedureCall CrLf]>
		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <returns>Filled <[ProcedureOutputType]> with resultset of stored procedure</returns>
		Public Overloads Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]>) As <[ProcedureOutputType]>
			' create parameters
			Dim parameters() As AseParameter = New AseParameter(<[AmountOfParameters]> - 1) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			' Call the stored proc.
			Dim toReturn As New <[ProcedureOutputType]>("<[CurrentSPCallName]>")
			Dim hasSucceeded As Boolean = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, Nothing)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>

			Return toReturn
		End Function

	
		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <returns>Filled <[ProcedureOutputType]> with resultset of stored procedure</returns>
		Public Overloads Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>ByRef returnValue As System.Int32) As <[ProcedureOutputType]>
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As AseParameter = New AseParameter(<[AmountOfParameters]>) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			' Return value parameter
			parameters(<[AmountOfParameters]>) = new AseParameter("RETURNVALUE", AseDbType.Integer, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			
			
			' Call the stored proc.
			Dim toReturn As New <[ProcedureOutputType]>("<[CurrentSPCallName]>")
			Dim hasSucceeded As Boolean = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, Nothing)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>

			returnValue = CType(parameters(<[AmountOfParameters]>).Value, Integer)
			Return toReturn
		End Function


		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Filled <[ProcedureOutputType]> with resultset of stored procedure</returns>
		Public Overloads Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>transactionToUse As ITransaction) As <[ProcedureOutputType]>
			' create parameters
			Dim parameters() As AseParameter = New AseParameter(<[AmountOfParameters]> - 1) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			' Call the stored proc.
			Dim toReturn As New <[ProcedureOutputType]>("<[CurrentSPCallName]>")
			Dim hasSucceeded As Boolean = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, transactionToUse)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>

			Return toReturn
		End Function

	
		''' <summary>
		''' Calls stored procedure '<[ActualStoredProcedureName]>'.<br/><br/>
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter]><[Foreach Parameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <param name="returnValue">Return value of the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>Filled <[ProcedureOutputType]> with resultset of stored procedure</returns>
		Public Overloads Shared Function <[CurrentSPCallName]>(<[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasInputAndOutputParameters]>, <[EndIf]><[Foreach OutputParameter Comma]>ByRef <[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]><[If HasParameter]>, <[EndIf]>ByRef returnValue As System.Int32, transactionToUse As ITransaction) As <[ProcedureOutputType]>
			' create parameters. Add 1 to make room for the return value parameter.
			Dim parameters() As AseParameter = New AseParameter(<[AmountOfParameters]>) {}
<[Foreach InputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
<[Foreach OutputParameter CrLf]>			parameters(<[ParameterIndex]>) = RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>)<[NextForeach]>
			' Return value parameter
			parameters(<[AmountOfParameters]>) = new AseParameter("RETURNVALUE", AseDbType.Integer, 0, ParameterDirection.ReturnValue, True, 10, 0, "",  DataRowVersion.Current, returnValue)			
			
			' Call the stored proc.
			Dim toReturn As New <[ProcedureOutputType]>("<[CurrentSPCallName]>")
			Dim hasSucceeded As Boolean = DbUtils.CallRetrievalStoredProcedure("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>", parameters, toReturn, transactionToUse)
<[Foreach OutputParameter CrLf]>			If Not parameters(<[ParameterIndex]>).Value Is System.DBNull.Value Then
				<[CaseCamel CurrentParameterName]> = CType(parameters(<[ParameterIndex]>).Value, <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]>)
			End If<[NextForeach]>

			returnValue = CType(parameters(<[AmountOfParameters]>).Value, Integer)
			Return toReturn
		End Function

		''' <summary>Creates an IRetrievalQuery Object For a Call To the procedure '<[ActualStoredProcedureName]>'.
		''' <[Foreach CustomProperty RetrievalStoredProcedureCall]>
		''' <[CustomPropertyName]>: <[CustomPropertyValue]><br/><[NextForeach]>
		''' </summary>
<[If HasParameter InputParameter]><[Foreach InputParameter CrLf]>		''' <param name="<[CaseCamel CurrentParameterName]>"><[CurrentParameterDirection]> parameter of stored procedure</param><[NextForeach]>
<[EndIf]>		''' <returns>IRetrievalQuery Object which Is ready To use For datafetching</returns>
		Public Shared Function Get<[CurrentSPCallName]>CallAsQuery( <[Foreach InputParameter Comma]><[CaseCamel CurrentParameterName]> As <[If IsNullable]><[If IsValueType]>Object<[Else]><[TypeOfParameter]><[EndIf]><[Else]><[TypeOfParameter]><[EndIf]><[NextForeach]>) As IRetrievalQuery 
			Dim procName As String = SD.LLBLGen.Pro.DQE.SybaseAse.DynamicQueryEngine.GetNewStoredProcedureName("<[SourceCatalogName]>.<[SourceSchemaName]>.<[ActualStoredProcedureName]>" )
			Dim toReturn As New RetrievalQuery( New AseCommand(procName) )
<[Foreach InputParameter CrLf]>			toReturn.Parameters.Add(RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Input, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, <[CaseCamel CurrentParameterName]>))<[NextForeach]>
<[Foreach OutputParameter CrLf]>			toReturn.Parameters.Add(RetrievalProcedures.CreateAseParameter("<[ActualParameterName]>", AseDbType.<[TypeOfActualParameter]>, <[ParameterSize]>, ParameterDirection.Output, True, <[ParameterPrecision]>, <[ParameterScale]>, "",  DataRowVersion.Current, Nothing))<[NextForeach]>
			toReturn.Command.CommandType = CommandType.StoredProcedure
			Return toReturn
		End Function
	<[NextForeach]>

		''' <summary>Creates a New AseParameter.</summary>
		''' <param name="parameterName">Name of the parameter.</param>
		''' <param name="parameterType">Type of the parameter.</param>
		''' <param name="size">The size.</param>
		''' <param name="direction">The direction.</param>
		''' <param name="isNullable">If Set To True, the parameter Is nullable</param>
		''' <param name="precision">The precision.</param>
		''' <param name="scale">The scale.</param>
		''' <param name="sourceColumn">The source column.</param>
		''' <param name="rowVersion">The row version.</param>
		''' <param name="value">The value.</param>
		''' <returns>New, usable parameter</returns>
		''' <remarks>Required as Sybase ASE's ado.net provider is buggy, it can't create a proper parameter with the full ctor if the value is a numeric type</remarks>
		Friend Shared Function CreateAseParameter(parameterName As String, parameterType As AseDbType, size As Integer, direction As ParameterDirection, isNullable As Boolean, precision As Byte, scale As Byte, sourceColumn As String, rowVersion As DataRowVersion, value As Object) As AseParameter

			Dim toReturn As AseParameter = Nothing
			
			Select Case parameterType
				Case AseDbType.Numeric, AseDbType.Decimal, AseDbType.Double, AseDbType.Real, AseDbType.Money, AseDbType.SmallMoney
					toReturn = New AseParameter(parameterName, parameterType)
					toReturn.IsNullable = isNullable
					toReturn.Direction = direction
					toReturn.SourceVersion = rowVersion
					toReturn.Value = value
				Case Else
					toReturn = New AseParameter(parameterName, parameterType, size, direction, isNullable, precision, scale, sourceColumn, rowVersion, value)
			End Select
			Return toReturn
		End Function

#Region "Included Code"
<# Custom_RetrievalProceduresTemplate #>
#End Region
	End Class
End Namespace
