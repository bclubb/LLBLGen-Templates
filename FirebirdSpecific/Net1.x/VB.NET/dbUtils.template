' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // This is generated code. 
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // Code is generated on: <[Time]>
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' ////////////////////////////////////////////////////////////////////////////////////////////////////////
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Configuration

Imports FirebirdSql.Data.Firebird

Imports SD.LLBLGen.Pro.ORMSupportClasses

Namespace <[RootNamespace]>.HelperClasses
	''' <summary>
	''' General utility methods used for Firebird usage by the framework. 
	''' </summary>
	Public Class DbUtils

#Region "Public Static Members"
		Public Shared ActualConnectionString As String = String.Empty
#End Region

#Region "Constants"
		Private Const connectionKeyString As String = "<[ConnectionStringKeyName]>"
#End Region

#Region "Class Member Declarations"
		Private Shared _commandTimeOut As Integer = 30
#End Region

		''' <summary>
		''' Private CTor, no instatiation possible
		''' </summary>
		Private Sub New()
		End Sub


		''' <summary>
		''' Creates a new FbConnection
		''' </summary>
		''' <param name="connectionString">Conectionstring To use</param>
		''' <returns>A ready to use, closed, FbConnection Object</returns>
		Public Shared Function CreateConnection(connectionString As String) As FbConnection
			Return New FbConnection(connectionString)
		End Function


		''' <summary>
		''' Creates a new closed FbConnection Object based on the connection string read from the *.config file of the appdomain.
		''' The connection string is stored in a key with the name defined in the constant connectionKeyString, mentioned above.
		''' </summary>
		''' <returns>A ready to use, closed, FbConnection Object</returns>
		Public Shared Function CreateConnection() As FbConnection
			If ActualConnectionString = String.Empty Then
				' read the connection string from the *.config file.
				Dim configReader As New AppSettingsReader()
				ActualConnectionString = configReader.GetValue(connectionKeyString, GetType(string)).ToString()
			End If
			Return CreateConnection(ActualConnectionString)
		End Function


		''' <summary>
		''' Determines which connection to use: the connection held by the passed in transaction (if any) or a new one (if no Transaction was passed in)
		''' </summary>
		''' <param name="containingTransaction">A transaction the caller participates in. If null, the caller is not participating in a transaction</param>
		''' <returns>A ready to use connection Object</returns>
		Public Shared Function DetermineConnectionToUse(containingTransaction As ITransaction) As IDbConnection
			If Not containingTransaction Is Nothing Then
				Return containingTransaction.ConnectionToUse
			Else
				Return CreateConnection()
			End If
		End Function


		''' <summary>
		''' Creates a new FbDataAdapter.
		''' </summary>
		''' <returns></returns>
		Public Shared Function CreateDataAdapter() As FbDataAdapter
			Return New FbDataAdapter()
		End Function


		''' <summary>
		''' Creates a new Firebird transaction
		''' </summary>
		''' <param name="connectionToUse">the connection to use</param>
		''' <param name="isolationLevelToUse">the isolation level to use</param>
		''' <param name="name">the name for the transaction</param>
		''' <returns>new FbTransaction Object.</returns>
		Public Shared Function CreateTransaction(connectionToUse As IDbConnection, isolationLevelToUse As IsolationLevel, name As String) As FbTransaction
			Return (CType(connectionToUse, FbConnection)).BeginTransaction(isolationLevelToUse, name)
		End Function


		''' <summary>
		''' Calls the specified action stored procedure in the Firebird database a newly created connection is connecting to. 
		''' </summary>
		''' <param name="storedProcedureToCall">Stored procedure to call</param>
		''' <param name="parameters">array of parameters to specify</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>the amount of rows affected. </returns>
		Public Shared Function CallActionStoredProcedure(storedProcedureToCall As String, parameters As FbParameter(), transactionToUse As ITransaction) As Integer
			Dim command As FbCommand = Nothing
			Dim connectionOpenedLocally As Boolean = False
			If Not transactionToUse Is Nothing Then
				command = New FbCommand(storedProcedureToCall, CType(transactionToUse.ConnectionToUse, FbConnection))
				command.Transaction = CType(transactionToUse.PhysicalTransaction, FbTransaction)
			Else
				command = New FbCommand(storedProcedureToCall, CreateConnection())
			End If
			command.CommandType = CommandType.StoredProcedure

			Dim toReturn As Integer = -1
			Try
				Dim i as Integer
				For i=0 to parameters.Length-1
					command.Parameters.Add(parameters(i))
				Next

				If command.Connection.State <> ConnectionState.Open Then
					command.Connection.Open()
					connectionOpenedLocally = True
				End If
				toReturn = command.ExecuteNonQuery()
			Finally
				If connectionOpenedLocally Then
					command.Connection.Close()
					command.Connection.Dispose()
				End If
				command.Dispose()

			End Try
			Return toReturn
		End Function


		''' <summary>
		''' Calls the specified retrieval stored procedure in the Firebird database a newly created connection is connecting to. Fills the
		''' specified datatable. 
		''' </summary>
		''' <param name="storedProcedureToCall">Stored procedure to call</param>
		''' <param name="parameters">array of parameters to specify</param>
		''' <param name="tableToFill">Datatable to fill by the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>true if succeeded, false otherwise</returns>
		Public Overloads Shared Function CallRetrievalStoredProcedure(storedProcedureToCall As String, parameters As FbParameter(), tableToFill As DataTable, transactionToUse As ITransaction) As Boolean
			Dim command As FbCommand = Nothing
			If Not transactionToUse Is Nothing Then
				command = New FbCommand(storedProcedureToCall, CType(transactionToUse.ConnectionToUse, FbConnection))
				command.Transaction = CType(transactionToUse.PhysicalTransaction, FbTransaction)
			Else
				command = New FbCommand(storedProcedureToCall, CreateConnection())
			End If
			command.CommandType = CommandType.StoredProcedure

			Try
				Dim adapter As new FbDataAdapter(command)
				Dim i as Integer
				For i=0 to parameters.Length-1
					If Not parameters(i) Is Nothing Then
						command.Parameters.Add(parameters(i))
					End If
				Next
				adapter.Fill(tableToFill)
				adapter.Dispose()
			Finally
				command.Dispose()
			End Try
			Return True
		End Function


		''' <summary>
		''' Calls the specified retrieval stored procedure in the Firebird database a newly created connection is connecting to. Fills the
		''' specified DataSet. 
		''' </summary>
		''' <param name="storedProcedureToCall">Stored procedure to call</param>
		''' <param name="parameters">array of parameters to specify</param>
		''' <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
		''' <param name="transactionToUse">the transaction to use, or null if no transaction is available.</param>
		''' <returns>true if succeeded, false otherwise</returns>
		Public Overloads Shared Function CallRetrievalStoredProcedure(storedProcedureToCall As String, parameters As FbParameter(), dataSetToFill As DataSet, transactionToUse As ITransaction) As Boolean
			Dim command As FbCommand = Nothing
			If Not transactionToUse Is Nothing Then
				command = New FbCommand(storedProcedureToCall, CType(transactionToUse.ConnectionToUse, FbConnection))
				command.Transaction = CType(transactionToUse.PhysicalTransaction, FbTransaction)
			Else
				command = New FbCommand(storedProcedureToCall, CreateConnection())
			End If
			command.CommandType = CommandType.StoredProcedure

			Try
				Dim adapter As new FbDataAdapter(command)
				Dim i as Integer
				For i=0 to parameters.Length-1
					If Not parameters(i) Is Nothing Then
						command.Parameters.Add(parameters(i))
					End If
				Next
				adapter.Fill(dataSetToFill)
				adapter.Dispose()
			Finally
				command.Dispose()
			End Try
			Return True
		End Function

#Region "Class Property Declarations"
		''' <summary>
		''' Gets / sets the command time out (in seconds). This is a global setting, so every Command object created after you've set this
		''' property to a value will have that value as CommandTimeOut. Default is 30 seconds which is the ADO.NET default.
		''' </summary>
		Public Shared Property CommandTimeOut As Integer
			Get
				Return _commandTimeOut
			End Get
			Set
				_commandTimeOut = value
				SD.LLBLGen.Pro.DQE.Firebird.DynamicQueryEngine.CommandTimeOut = _commandTimeOut
			End Set
		End Property
#End Region

#Region "Included Code"
<# Custom_DbUtilsTemplate #>
#End Region
	End Class
End Namespace
