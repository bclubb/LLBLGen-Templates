' ///////////////////////////////////////////////////////////////
' // This is generated code. 
' //////////////////////////////////////////////////////////////
' // Code is generated using LLBLGen Pro version: <[LLBLGenVersion]>
' // Code is generated on: <[Time]>
' // Code is generated using templates: <[TemplateName]>
' // Templates vendor: Solutions Design.
' // Templates version: <[TemplateVersion]>
' //////////////////////////////////////////////////////////////
Imports System
Imports System.Configuration
Imports System.Collections
Imports System.Data
Imports System.Data.Common
Imports System.EnterpriseServices

Imports FirebirdSql.Data.Firebird

Imports SD.LLBLGen.Pro.ORMSupportClasses
Imports SD.LLBLGen.Pro.DQE.Firebird

<[ UserCodeRegion "AdditionalNamespaces" ]>
' __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
' __LLBLGENPRO_USER_CODE_REGION_END
<[ EndUserCodeRegion ]>


Namespace <[RootNamespace]><[DbSpecificNamespaceSuffix]>
	''' <summary>
	''' Data access adapter class, which controls the complete database interaction with the database for all objects.
	''' Firebird specific.
	''' </summary>
	''' <remarks>
	''' Use a DataAccessAdapter object solely per thread, and per connection. A DataAccessAdapter object contains 1 active connection 
	''' and no thread-access scheduling code. This means that you need to create a New DataAccessAdapter object if you want to utilize
	''' in another thread a New connection and a New transaction or want to open a New connection.
	''' </remarks>
	Public Class DataAccessAdapter 
		Inherits DataAccessAdapterBase
	
#Region "Public Shared members"
		''' <summary>
		''' The name of the key in the *.config file of the executing application which contains the connection string.
		''' </summary>
		''' <remarks>Default: the value Set in the LLBLGen Pro project properties</remarks>
		Public Shared ConnectionStringKeyName As String = "<[ConnectionStringKeyName]>"
#End Region
	

#Region "Constructors"
		''' <summary>
		''' CTor
		''' </summary>
		Public Sub New()
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClass(ReadConnectionStringFromConfig(), False)
		End Sub



		''' <summary>
		''' CTor
		''' </summary>
		''' <param name="comPlusContextHost">the COM+ context host for this adapter instance.</param>
		''' <remarks>do not call this from your code</remarks>
		Public Sub New(comPlusContextHost As IComPlusAdapterContext)
			MyBase.New(comPlusContextHost, PersistenceInfoProviderSingleton.GetInstance())
			InitClass(ReadConnectionStringFromConfig(), False)
		End Sub


		''' <summary>
		''' CTor
		''' </summary>
		''' <param name="comPlusContextHost">the COM+ context host for this adapter instance.</param>
		''' <param name="connectionString">The connection string to use when connecting to the database.</param>
		''' <remarks>do not call this from your code</remarks>
		Public Sub New(comPlusContextHost As IComPlusAdapterContext, connectionString As String)
			MyBase.New(comPlusContextHost, PersistenceInfoProviderSingleton.GetInstance())
			InitClass(connectionString, False)
		End Sub
		
		
		''' <summary>
		''' CTor
		''' </summary>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will not close an opened connection. Use this for multi action usage.</param>
		Public Sub New(keepConnectionOpen As Boolean)
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClass(ReadConnectionStringFromConfig(), keepConnectionOpen)
		End Sub


		''' <summary>
		''' CTor
		''' </summary>
		''' <param name="connectionString">The connection string to use when connecting to the database.</param>
		Public Sub New(connectionString As String)
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClass(connectionString, False)
		End Sub


		''' <summary>
		''' CTor
		''' </summary>
		''' <param name="connectionString">The connection string to use when connecting to the database.</param>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will not close an opened connection. Use this for multi action usage.</param>
		Public Sub New(connectionString As String, keepConnectionOpen As Boolean)
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClass(connectionString, keepConnectionOpen)
		End Sub
#End Region


#Region "Stored Procedure related routines"
		''' <summary>
		''' Calls the specified action stored procedure in the Firebird database. If a transaction is in progress, it will participate in
		''' that transaction.
		''' </summary>
		''' <param name="storedProcedureToCall">Stored procedure to call</param>
		''' <param name="parameters">array of parameters to specify</param>
		''' <returns>the amount of rows affected. </returns>
		Public Overridable Function CallActionStoredProcedure(storedProcedureToCall As String, parameters() As FbParameter) As Integer
			Dim Command As New FbCommand(storedProcedureToCall)
			Command.Connection = CType(MyBase.GetActiveConnection(), FbConnection)
			If MyBase.IsTransactionInProgress Then
				Command.Transaction = CType(MyBase.PhysicalTransaction, FbTransaction)
			End If
			Command.CommandType = CommandType.StoredProcedure

			Dim toReturn As Integer = -1
			Try
				Dim i As Integer
				For i=0 To parameters.Length-1
					Command.Parameters.Add(parameters(i))
				Next i

				MyBase.OpenConnection()
				toReturn = Command.ExecuteNonQuery()
			Finally
				command.Dispose()
				'  clean up a dangling automaticly opened connection if needed.
				If Not (MyBase.KeepConnectionOpen Or MyBase.IsTransactionInProgress) Then
					MyBase.CloseConnection()
				End If
			End Try
			Return toReturn
		End Function


		''' <summary>
		''' Calls the specified retrieval stored procedure in the Firebird database. Fills the
		''' specified datatable. Will participate in the transaction if a transaction is in progress.
		''' </summary>
		''' <param name="storedProcedureToCall">Stored procedure to call</param>
		''' <param name="parameters">array of parameters to specify</param>
		''' <param name="tableToFill">Datatable to fill by the stored procedure</param>
		''' <returns>True if succeeded, False otherwise</returns>
		Public Overridable Function CallRetrievalStoredProcedure(storedProcedureToCall As String, parameters() As FbParameter, tableToFill As DataTable) As Boolean
			Dim Command As New FbCommand(storedProcedureToCall)
			Command.Connection = CType(MyBase.GetActiveConnection(), FbConnection)
			If MyBase.IsTransactionInProgress Then
				Command.Transaction = CType(MyBase.PhysicalTransaction, FbTransaction)
			End If
			Command.CommandType = CommandType.StoredProcedure

			Try
				Dim adapter As FbDataAdapter = CType(CreateNewPhysicalDataAdapter(), FbDataAdapter)
				adapter.SelectCommand = Command
				Dim i As Integer
				For i=0 To parameters.Length-1
					If Not parameters(i) Is Nothing Then
						Command.Parameters.Add(parameters(i))
					End If
				Next i
				adapter.Fill(tableToFill)
				adapter.Dispose()
			Finally
				command.Dispose()
			End Try
			Return True
		End Function


		''' <summary>
		''' Calls the specified retrieval stored procedure in the Firebird database. Fills the
		''' specified DataSet. Will participate in the transaction if a transaction is in progress.
		''' </summary>
		''' <param name="storedProcedureToCall">Stored procedure to call</param>
		''' <param name="parameters">array of parameters to specify</param>
		''' <param name="dataSetToFill">DataSet to fill by the stored procedure</param>
		''' <returns>True if succeeded, False otherwise</returns>
		Public Overridable Function CallRetrievalStoredProcedure(storedProcedureToCall As String, parameters() As FbParameter, dataSetToFill As DataSet) As Boolean
			Dim Command As New FbCommand(storedProcedureToCall)
			Command.Connection = CType(MyBase.GetActiveConnection(), FbConnection)
			If MyBase.IsTransactionInProgress Then
				Command.Transaction = CType(MyBase.PhysicalTransaction, FbTransaction)
			End If
			Command.CommandType = CommandType.StoredProcedure

			Dim adapter As FbDataAdapter = CType(CreateNewPhysicalDataAdapter(), FbDataAdapter)
			adapter.SelectCommand = Command

			Dim i As Integer
			For i=0 To parameters.Length-1
				If Not parameters(i) Is Nothing Then
					Command.Parameters.Add(parameters(i))
				End If
			Next i
			adapter.Fill(dataSetToFill)

			Return True
		End Function
#End Region

		''' <summary>
		''' Inserts in each predicate expression element the persistence info object for the field used. If there is already a fieldpersistenceinfo 
		''' element for a given field, it is skipped. 
		''' </summary>
		''' <param name="expression">IPredicateExpression object which has predicate elements whose persistence info objects have to be
		''' Set to a value.</param>
		Protected Overloads Overrides Sub InsertPersistenceInfoObjects(expression As IPredicateExpression)
			If expression Is Nothing Then
				Return
			End If

			Dim i As Integer
			For i = 0 To expression.Count-1
				If expression(i).Type = PredicateExpressionElementType.Predicate Then
					Dim currentPredicate As IPredicate = CType(expression(i).Contents, IPredicate)
					
					Select Case CType(currentPredicate.InstanceType, PredicateType)
						Case PredicateType.PredicateExpression
							'  recurse
							InsertPersistenceInfoObjects(CType(expression(i).Contents, IPredicateExpression))
						Case PredicateType.FieldBetweenPredicate
							Dim betweenPredicate As FieldBetweenPredicate = CType(currentPredicate, FieldBetweenPredicate)
							If betweenPredicate.PersistenceInfo Is Nothing Then
								betweenPredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(betweenPredicate.FieldCore, IEntityField2))
							End If
							If betweenPredicate.BeginIsField AndAlso (betweenPredicate.PersistenceInfoBegin Is Nothing) Then
								betweenPredicate.PersistenceInfoBegin = GetFieldPersistenceInfo(CType(betweenPredicate.FieldBeginCore, IEntityField2))
							End If
							If betweenPredicate.EndIsField AndAlso (betweenPredicate.PersistenceInfoEnd Is Nothing) Then
								betweenPredicate.PersistenceInfoEnd = GetFieldPersistenceInfo(CType(betweenPredicate.FieldEndCore, IEntityField2))
							End If
						Case PredicateType.FieldCompareNullPredicate
							Dim compareNullPredicate As FieldCompareNullPredicate = CType(currentPredicate, FieldCompareNullPredicate)
							If compareNullPredicate.PersistenceInfo Is Nothing Then
								compareNullPredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(compareNullPredicate.FieldCore, IEntityField2))
							End If
						Case PredicateType.FieldCompareValuePredicate
							Dim compareValuePredicate As FieldCompareValuePredicate = CType(currentPredicate, FieldCompareValuePredicate)
							If compareValuePredicate.PersistenceInfo Is Nothing Then
								compareValuePredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(compareValuePredicate.FieldCore, IEntityField2))
							End If
						Case PredicateType.FieldLikePredicate
							Dim likePredicate As FieldLikePredicate = CType(currentPredicate, FieldLikePredicate)
							If likePredicate.PersistenceInfo Is Nothing Then
								likePredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(likePredicate.FieldCore, IEntityField2))
							End If
						Case PredicateType.FieldCompareRangePredicate
							Dim compareRangePredicate As FieldCompareRangePredicate = CType(currentPredicate, FieldCompareRangePredicate)
							If compareRangePredicate.PersistenceInfo Is Nothing Then
								compareRangePredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(compareRangePredicate.FieldCore, IEntityField2))
							End If
						Case PredicateType.FieldCompareExpressionPredicate
							Dim expressionPredicate As FieldCompareExpressionPredicate = CType(currentPredicate, FieldCompareExpressionPredicate)
							If expressionPredicate.PersistenceInfo Is Nothing Then
								expressionPredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(expressionPredicate.FieldCore, IEntityField2))
							End If
							
							If Not expressionPredicate.ExpressionToCompareWith Is Nothing Then
								InsertPersistenceInfoObjects(expressionPredicate.ExpressionToCompareWith)
							End If
						Case PredicateType.FieldFullTextSearchPredicate
							Dim fullTextSearchPredicate As FieldFullTextSearchPredicate = CType(currentPredicate, FieldFullTextSearchPredicate)
							If fullTextSearchPredicate.PersistenceInfo Is Nothing Then
								fullTextSearchPredicate.PersistenceInfo = GetFieldPersistenceInfo(CType(fullTextSearchPredicate.FieldCore, IEntityField2))
							End If
						Case PredicateType.FieldCompareSetPredicate
							Dim compareSetPredicate As FieldCompareSetPredicate = CType(currentPredicate, FieldCompareSetPredicate)
							If compareSetPredicate.PersistenceInfoField Is Nothing AndAlso Not compareSetPredicate.FieldCore Is Nothing Then
								compareSetPredicate.PersistenceInfoField = GetFieldPersistenceInfo(CType(compareSetPredicate.FieldCore, IEntityField2))
							End If
							If compareSetPredicate.PersistenceInfoSetField Is Nothing Then
								compareSetPredicate.PersistenceInfoSetField = GetFieldPersistenceInfo(CType(compareSetPredicate.SetFieldCore, IEntityField2))
							End If
							InsertPersistenceInfoObjects(compareSetPredicate.SetFilterAsPredicateExpression)
							InsertPersistenceInfoObjects(compareSetPredicate.SetRelations)
							InsertPersistenceInfoObjects(compareSetPredicate.SetSorter)
							InsertPersistenceInfoObjects(compareSetPredicate.GroupByClause)
						Case Else
							<[ UserCodeRegion "InsertPersistenceInfoObjectsPredicate" ]>
							' __LLBLGENPRO_USER_CODE_REGION_START InsertPersistenceInfoObjectsPredicate
							' __LLBLGENPRO_USER_CODE_REGION_END
							<[ EndUserCodeRegion ]>
							OnInsertPersistenceObjects(currentPredicate)
					End Select
				End If
			Next i
		End Sub

		''' <summary>
		''' Creates a New Dynamic Query engine Object And passes In the defined catalog/schema overwrite hashtables.
		''' </summary>
		Protected Overrides Function CreateDynamicQueryEngine() As DynamicQueryEngineBase
			Dim toReturn As New DynamicQueryEngine()
			Return CType(toReturn, DynamicQueryEngineBase)
		End Function


		''' <summary>
		''' Creates a New physical connection object.
		''' </summary>
		''' <param name="connectionString">Connectionstring to use for the New connection object</param>
		''' <returns>IDbConnection implementing connection object.</returns>
		Protected Overrides Function CreateNewPhysicalConnection(connectionString As String) As IDbConnection
			Return New FbConnection(connectionString)
		End Function


		''' <summary>
		''' Creates a New physical transaction object over the created connection. The connection is assumed to be open.
		''' </summary>
		''' <returns>a physical transaction object, like an instance of FbTransaction.</returns>
		Protected Overrides Function CreateNewPhysicalTransaction() As IDbTransaction
			Return CType(MyBase.GetActiveConnection(), FbConnection).BeginTransaction(MyBase.TransactionIsolationLevel, MyBase.TransactionName)
		End Function


		''' <summary>
		''' Creates a New .NET DataAdapter for the database system this DataAccessAdapter object is targeting. 
		''' </summary>
		''' <returns>New .NET DataAdapter object</returns>
		Protected Overloads Overrides Function CreateNewPhysicalDataAdapter() As DbDataAdapter
			Return New FbDataAdapter()
		End Function


		''' <summary>
		''' Initializes the class.
		''' </summary>
		''' <param name="connectionString"></param>
		''' <param name="keepConnectionOpen"></param>
		Private Sub InitClass(connectionString As String, keepConnectionOpen As Boolean)
			MyBase.ConnectionString = connectionString
			MyBase.KeepConnectionOpen = keepConnectionOpen

			MyBase.CommandTimeOut = -1
		End Sub


		''' <summary>
		''' Reads the value of the setting with the key ConnectionStringKeyName from the *.config file and stores that value as the
		''' active connection string to use for this object.
		''' </summary>
		''' <returns>connection string read</returns>
		Private Function ReadConnectionStringFromConfig() As String
			'  read the connection string from the *.config file.
			Dim configReader As New AppSettingsReader()
			Return configReader.GetValue(DataAccessAdapter.ConnectionStringKeyName, GetType(String)).ToString()
		End Function


#Region "Custom DataAccessAdapter code"
		<[ UserCodeRegion "CustomDataAccessAdapterCode" ]>
		' __LLBLGENPRO_USER_CODE_REGION_START CustomDataAccessAdapterCode
		' __LLBLGENPRO_USER_CODE_REGION_END
		<[ EndUserCodeRegion ]>
#End Region

#Region "Included Code"
<# Custom_DataAccessAdapterTemplate #>
#End Region
	End Class


	''' <summary>
	''' ComPlusAdapterContext class which is used in Adapter for hosting a COM+ aware DataAccessAdapter class. 
	''' Use the hosted DataAccessAdapter class to start a new COM+ transaction.
	''' </summary>
	Public Class ComPlusAdapterContext 
		Inherits ComPlusAdapterContextBase

		''' <summary>
		''' CTor
		''' </summary>
		Public Sub New()
			MyBase.SetAdapter(New DataAccessAdapter(Me))
		End Sub
		



		''' <summary>
		''' Creates the physical connection object
		''' </summary>
		''' <param name="connectionString">connection string to use</param>
		''' <returns>Usable connection object (closed)</returns>
		Protected Overrides Overloads Function CreateDatabaseConnection(connectionString As String) As IDbConnection
			Return New FbConnection(connectionString)
		End Function
	End Class
End Namespace
